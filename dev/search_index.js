var documenterSearchIndex = {"docs":
[{"location":"about/community/#","page":"Community","title":"Community","text":"Everyone is welcome to join our community in our gitter channel.","category":"page"},{"location":"about/community/#","page":"Community","title":"Community","text":"(Image: gitter)","category":"page"},{"location":"kriging/solver/#Solver-1","page":"Solver","title":"Solver","text":"","category":"section"},{"location":"kriging/solver/#","page":"Solver","title":"Solver","text":"Kriging estimators are made available for advanced users. Most users will make use of the polyalgorithm Kriging solver:","category":"page"},{"location":"kriging/solver/#","page":"Solver","title":"Solver","text":"Kriging","category":"page"},{"location":"kriging/solver/#KrigingEstimators.Kriging","page":"Solver","title":"KrigingEstimators.Kriging","text":"Kriging(var₁=>param₁, var₂=>param₂, ...)\n\nA polyalgorithm Kriging estimation solver.\n\nEach pair var=>param specifies the KrigingParam param for the Kriging variable var. In order to avoid boilerplate code, the constructor expects pairs of Symbol and NamedTuple instead.\n\nParameters\n\nvariogram - Variogram model (default to GaussianVariogram())\nmean      - Simple Kriging mean\ndegree    - Universal Kriging degree\ndrifts    - External Drift Kriging drift functions\n\nLatter options override former options. For example, by specifying drifts, the user is telling the algorithm to ignore degree and mean. If no option is specified, Ordinary Kriging is used by default with the variogram only.\n\nmaxneighbors - Maximum number of neighbors (default to nothing)\nneighborhood - Search neighborhood (default to nothing)\ndistance     - Distance used to find nearest neighbors (default to Euclidean())\n\nThe maxneighbors option can be used to perform approximate Kriging with a subset of data points per estimation location. Two neighborhood search methods are available depending on the value of neighborhood:\n\nIf a neighborhood is provided, local Kriging is performed by sliding the neighborhood in the domain.\nIf neighborhood is not provided, the Kriging system is built using maxneighbors nearest neighbors according to a distance.\n\nExamples\n\nSolve the variable :var₁ with Simple Kriging by specifying the mean, and the variable :var₂ with Universal Kriging by specifying the degree and the variogram model.\n\njulia> Kriging(\n  :var₁ => (mean=1.,),\n  :var₂ => (degree=1, variogram=SphericalVariogram(range=20.))\n)\n\nSolve all variables of the problem with the default parameters (i.e. Ordinary Kriging with unit Gaussian variogram):\n\njulia> Kriging()\n\n\n\n\n\n\n\n","category":"type"},{"location":"variography/empirical/#Empirical-variograms-1","page":"Empirical variograms","title":"Empirical variograms","text":"","category":"section"},{"location":"variography/empirical/#","page":"Empirical variograms","title":"Empirical variograms","text":"An empirical variogram has the form:","category":"page"},{"location":"variography/empirical/#","page":"Empirical variograms","title":"Empirical variograms","text":"hatgamma(h) = frac12N(h) sum_(ij) in N(h) (z_i - z_j)^2","category":"page"},{"location":"variography/empirical/#","page":"Empirical variograms","title":"Empirical variograms","text":"where N(h) = left(ij) mid x_i - x_j = hright is the set of pairs of locations at a distance h and N(h) is the cardinality of the set. Empirical variograms can be estimated using general distance functions. These can be used in order to for example:","category":"page"},{"location":"variography/empirical/#","page":"Empirical variograms","title":"Empirical variograms","text":"Model anisotropy (e.g. ellipsoid distance)\nPerform geostatistical simulation on spherical coordinate systems (e.g. haversine distance)","category":"page"},{"location":"variography/empirical/#","page":"Empirical variograms","title":"Empirical variograms","text":"Please see Distances.jl for a complete list of options.","category":"page"},{"location":"variography/empirical/#Omnidirectional-1","page":"Empirical variograms","title":"Omnidirectional","text":"","category":"section"},{"location":"variography/empirical/#","page":"Empirical variograms","title":"Empirical variograms","text":"EmpiricalVariogram","category":"page"},{"location":"variography/empirical/#Variography.EmpiricalVariogram","page":"Empirical variograms","title":"Variography.EmpiricalVariogram","text":"EmpiricalVariogram(sdata, var₁, var₂=var₁; [optional parameters])\n\nComputes the empirical (a.k.a. experimental) omnidirectional (cross-)variogram for variables var₁ and var₂ stored in spatial data sdata.\n\nEmpiricalVariogram(partition, var₁, var₂=var₁; [optional parameters])\n\nAlternatively, compute the (cross-)variogram on a partition of the data.\n\nParameters\n\nnlags    - number of lags (default to 20)\nmaxlag   - maximum lag (default to half of maximum lag of data)\ndistance - custom distance function (default to Euclidean distance)\nalgo     - accumulation algorithm (default to :ball)\n\nAvailable algorithms:\n\n:full - loop over all pairs of points in the data\n:ball - loop over all points inside maximum lag ball\n\nAll implemented algorithms produce the exact same result. The :ball algorithm is considerably faster when the maximum lag is much smaller than the bounding box of the data.\n\nSee also: DirectionalVariogram\n\nReferences\n\nChilès, JP and Delfiner, P. 2012. Geostatistics: Modeling Spatial Uncertainty\n\n\n\n\n\n","category":"type"},{"location":"variography/empirical/#Directional-1","page":"Empirical variograms","title":"Directional","text":"","category":"section"},{"location":"variography/empirical/#","page":"Empirical variograms","title":"Empirical variograms","text":"DirectionalVariogram","category":"page"},{"location":"variography/empirical/#Variography.DirectionalVariogram","page":"Empirical variograms","title":"Variography.DirectionalVariogram","text":"DirectionalVariogram(sdata, direction, var₁, var₂=var₁; dtol=1e-6, [parameters])\n\nComputes the empirical (cross-)variogram for the variables var₁ and var₂ stored in spatial data sdata along a given direction.\n\nOptional parameters include the parameters for EmpiricalVariogram and the parameters for DirectionPartitioner.\n\n\n\n\n\n","category":"function"},{"location":"variography/empirical/#Varioplane-1","page":"Empirical variograms","title":"Varioplane","text":"","category":"section"},{"location":"variography/empirical/#","page":"Empirical variograms","title":"Empirical variograms","text":"EmpiricalVarioplane","category":"page"},{"location":"variography/empirical/#Variography.EmpiricalVarioplane","page":"Empirical variograms","title":"Variography.EmpiricalVarioplane","text":"EmpiricalVarioplane(sdata, var₁, var₂=var₁,\n                    theta=0, phi=90, ptol=1e-6, dtol=0.5,\n                    nangs=50, nlags=20, maxlag=nothing)\n\nGiven a normal direction in spherical coordinates theta and phi in degrees, estimate the (cross-)variogram of variables var₁ and var₂ along all directions in the corresponding plane of variation.\n\nOptionally, specify the tolerance ptol for the PlanePartitioner the tolerance dtol for the DirectionPartitioner, the number of angles nangs in the plane, the number of lags nlags along each of these angles, and the maximum lag maxlag to consider.\n\n\n\n\n\n","category":"type"},{"location":"variography/theoretical/#Theoretical-variograms-1","page":"Theoretical variograms","title":"Theoretical variograms","text":"","category":"section"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"In an intrinsic isotropic model, the variogram is only a function of the distance between any two points x_1x_2 in R^m:","category":"page"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"gamma(x_1x_2) = gamma(x_1 - x_2) = gamma(h)","category":"page"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"Under the additional assumption of 2nd-order stationarity, the well-known covariance is directly related via gamma(h) = cov(0) - cov(h). Anisotropic models are easily obtained by defining an ellipsoid distance in place of the Euclidean distance. For a list of available distances, please see Distances.jl.","category":"page"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"This package implements a few commonly used and other more exotic variogram models. Most of these models share a set of default parameters:","category":"page"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"sill=1\nrange=1\nnugget=0\ndistance=Euclidean()","category":"page"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"Some of them have extra parameters that can be set with keyword arguments:","category":"page"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"using GeoStats # hide\nusing Plots # hide\nMaternVariogram(order=1.) # set order of Bessel function","category":"page"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"Additionally, a composite (additive) variogram model gamma(h) = gamma_1(h) + gamma_2(h) + cdots gamma_n(h) can be constructed from multiple variogram models. Like the other variogram models, a composite variogram gamma can be evaluated as an isotropic model gamma(h) or as a model with a custom distance gamma(x_1x_2):","category":"page"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"γ = GaussianVariogram() + ExponentialVariogram()\n\nγ(1.), γ([0.,0.], [1.,0.])","category":"page"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"Finally, the 2nd-order stationarity property of a variogram can be checked with the isstationary method:","category":"page"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"isstationary","category":"page"},{"location":"variography/theoretical/#Variography.isstationary","page":"Theoretical variograms","title":"Variography.isstationary","text":"isstationary(γ)\nisstationary(V)\n\nCheck if variogram γ or variogram type V possesses the 2nd-order stationary property.\n\n\n\n\n\n","category":"function"},{"location":"variography/theoretical/#Gaussian-1","page":"Theoretical variograms","title":"Gaussian","text":"","category":"section"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"gamma(h) = (s - n) left1 - expleft(-3left(frachrright)^2right)right + n cdot 1_(0infty)(h)","category":"page"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"GaussianVariogram","category":"page"},{"location":"variography/theoretical/#Variography.GaussianVariogram","page":"Theoretical variograms","title":"Variography.GaussianVariogram","text":"GaussianVariogram(sill=s, range=r, nugget=n, distance=d)\n\nA Gaussian variogram with sill s, range r and nugget n. Optionally, use a custom distance d.\n\n\n\n\n\n","category":"type"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"plot(GaussianVariogram(), maxlag=3.)","category":"page"},{"location":"variography/theoretical/#Exponential-1","page":"Theoretical variograms","title":"Exponential","text":"","category":"section"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"gamma(h) = (s - n) left1 - expleft(-3left(frachrright)right)right + n cdot 1_(0infty)(h)\n","category":"page"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"ExponentialVariogram","category":"page"},{"location":"variography/theoretical/#Variography.ExponentialVariogram","page":"Theoretical variograms","title":"Variography.ExponentialVariogram","text":"ExponentialVariogram(sill=s, range=r, nugget=n, distance=d)\n\nAn exponential variogram with sill s, range r and nugget n. Optionally, use a custom distance d.\n\n\n\n\n\n","category":"type"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"plot(ExponentialVariogram(), maxlag=3.)","category":"page"},{"location":"variography/theoretical/#Matern-1","page":"Theoretical variograms","title":"Matern","text":"","category":"section"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"gamma(h) = (s - n) left1 - frac2^1-nuGamma(nu) left(sqrt2nufrachrright)^nu K_nuleft(sqrt2nufrachrright)right + n cdot 1_(0infty)(h)","category":"page"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"MaternVariogram","category":"page"},{"location":"variography/theoretical/#Variography.MaternVariogram","page":"Theoretical variograms","title":"Variography.MaternVariogram","text":"MaternVariogram(sill=s, range=r, nugget=n, order=ν, distance=d)\n\nA Matérn variogram with sill s, range r and nugget n. The parameter ν is the order of the Bessel function. Optionally, use a custom distance d.\n\n\n\n\n\n","category":"type"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"plot(MaternVariogram(), maxlag=3.)","category":"page"},{"location":"variography/theoretical/#Spherical-1","page":"Theoretical variograms","title":"Spherical","text":"","category":"section"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"gamma(h) = (s - n) leftleft(frac32left(frachrright) + frac12left(frachrright)^3right) cdot 1_(0r)(h) + 1_rinfty)(h)right + n cdot 1_(0infty)(h)","category":"page"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"SphericalVariogram","category":"page"},{"location":"variography/theoretical/#Variography.SphericalVariogram","page":"Theoretical variograms","title":"Variography.SphericalVariogram","text":"SphericalVariogram(sill=s, range=r, nugget=n, distance=d)\n\nA spherical variogram with sill s, range r and nugget n. Optionally, use a custom distance d.\n\n\n\n\n\n","category":"type"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"plot(SphericalVariogram(), maxlag=3.)","category":"page"},{"location":"variography/theoretical/#Cubic-1","page":"Theoretical variograms","title":"Cubic","text":"","category":"section"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"gamma(h) = (s - n) leftleft(7left(frachrright)^2 - frac354left(frachrright)^3 + frac72left(frachrright)^5 - frac34left(frachrright)^7right) cdot 1_(0r)(h) + 1_rinfty)(h)right + n cdot 1_(0infty)(h)","category":"page"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"CubicVariogram","category":"page"},{"location":"variography/theoretical/#Variography.CubicVariogram","page":"Theoretical variograms","title":"Variography.CubicVariogram","text":"CubicVariogram(sill=s, range=r, nugget=n, distance=d)\n\nA cubic variogram with sill s, range r and nugget n. Optionally, use a custom distance d.\n\n\n\n\n\n","category":"type"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"plot(CubicVariogram(), maxlag=3.)","category":"page"},{"location":"variography/theoretical/#Pentaspherical-1","page":"Theoretical variograms","title":"Pentaspherical","text":"","category":"section"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"gamma(h) = (s - n) leftleft(frac158left(frachrright) - frac54left(frachrright)^3 + frac38left(frachrright)^5right) cdot 1_(0r)(h) + 1_rinfty)(h)right + n cdot 1_(0infty)(h)","category":"page"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"PentasphericalVariogram","category":"page"},{"location":"variography/theoretical/#Variography.PentasphericalVariogram","page":"Theoretical variograms","title":"Variography.PentasphericalVariogram","text":"PentasphericalVariogram(sill=s, range=r, nugget=n, distance=d)\n\nA pentaspherical variogram with sill s, range r and nugget n. Optionally, use a custom distance d.\n\n\n\n\n\n","category":"type"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"plot(PentasphericalVariogram(), maxlag=3.)","category":"page"},{"location":"variography/theoretical/#Power-1","page":"Theoretical variograms","title":"Power","text":"","category":"section"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"gamma(h) = sh^a + n cdot 1_(0infty)(h)","category":"page"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"PowerVariogram","category":"page"},{"location":"variography/theoretical/#Variography.PowerVariogram","page":"Theoretical variograms","title":"Variography.PowerVariogram","text":"PowerVariogram(scaling=s, exponent=a, nugget=n, distance=d)\n\nA power variogram with scaling s, exponent a and nugget n. Optionally, use a custom distance d.\n\n\n\n\n\n","category":"type"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"plot(PowerVariogram(), maxlag=3.)","category":"page"},{"location":"variography/theoretical/#Sine-hole-1","page":"Theoretical variograms","title":"Sine hole","text":"","category":"section"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"gamma(h) = (s - n) left1 - fracsin(pi h  r)pi h  rright + n cdot 1_(0infty)(h)","category":"page"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"SineHoleVariogram","category":"page"},{"location":"variography/theoretical/#Variography.SineHoleVariogram","page":"Theoretical variograms","title":"Variography.SineHoleVariogram","text":"SineHoleVariogram(sill=s, range=r, nugget=n, distance=d)\n\nA sine hole variogram with sill s, range r and nugget n. Optionally, use a custom distance d.\n\n\n\n\n\n","category":"type"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"plot(SineHoleVariogram(), maxlag=3.)","category":"page"},{"location":"variography/theoretical/#Composite-1","page":"Theoretical variograms","title":"Composite","text":"","category":"section"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"CompositeVariogram","category":"page"},{"location":"variography/theoretical/#Variography.CompositeVariogram","page":"Theoretical variograms","title":"Variography.CompositeVariogram","text":"CompositeVariogram(γ₁, γ₂, ..., γₙ)\n\nA composite (additive) model of variograms γ(h) = γ₁(h) + γ₂(h) + ⋯ + γₙ(h).\n\n\n\n\n\n","category":"type"},{"location":"variography/theoretical/#","page":"Theoretical variograms","title":"Theoretical variograms","text":"γ = GaussianVariogram() + SphericalVariogram()\n\nplot(γ, maxlag=3.)","category":"page"},{"location":"contributing/#Contributing-1","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"First off, thank you for considering contributing to GeoStats.jl. It’s people like you that make this project so much fun. Below are a few suggestions to speed up the collaboration process.","category":"page"},{"location":"contributing/#Reporting-issues-1","page":"Contributing","title":"Reporting issues","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"If you are experiencing issues or have discovered a bug, please report it on GitHub. To make the resolution process easier, please include the version of Julia and GeoStats.jl in your writeup. These can be found with two commands:","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"julia> versioninfo()\npkg> status","category":"page"},{"location":"contributing/#Feature-requests-1","page":"Contributing","title":"Feature requests","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"If you have suggestions of improvement or algorithms that you would like to see implemented in GeoStats.jl, please open an issue on GitHub. Suggestions as well as feature requests are very welcome.","category":"page"},{"location":"contributing/#Code-contribution-1","page":"Contributing","title":"Code contribution","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"If you have code that you would like to contribute to GeoStats.jl, that is awesome! Please open an issue before you create the pull request on GitHub so that we make sure your idea is aligned with our goals for the project.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"After your idea is discussed and revised by maintainers, please get the development version of the project by typing the following in the package manager:","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"] dev GeoStatsBase Variography KrigingEstimators PointPatterns GeoStats","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"This will clone all the project components in your ~/.julia folder so that you can modify it and submit a pull request on GitHub later. Don't hesitate to ask questions in our gitter channel if you are not familiar with the Git workflow.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"You can also develop your own solver independently, under your own license terms, and optionally make it public. Please check the developer guide for information on how to write solvers that are compatible with the framework.","category":"page"},{"location":"operations/covering/#Covering-1","page":"Covering","title":"Covering","text":"","category":"section"},{"location":"operations/covering/#Overview-1","page":"Covering","title":"Overview","text":"","category":"section"},{"location":"operations/covering/#","page":"Covering","title":"Covering","text":"Spatial objects can be covered with spatial regions (e.g. bounding boxes):","category":"page"},{"location":"operations/covering/#","page":"Covering","title":"Covering","text":"cover(::AbstractSpatialObject, ::AbstractCoverer)","category":"page"},{"location":"operations/covering/#GeoStatsBase.cover-Tuple{AbstractSpatialObject,AbstractCoverer}","page":"Covering","title":"GeoStatsBase.cover","text":"cover(object, coverer)\n\nCover spatial object with coverer method.\n\n\n\n\n\n","category":"method"},{"location":"operations/covering/#","page":"Covering","title":"Covering","text":"Other utility functions are available, which are implemented with the general cover function:","category":"page"},{"location":"operations/covering/#","page":"Covering","title":"Covering","text":"boundbox","category":"page"},{"location":"operations/covering/#GeoStatsBase.boundbox","page":"Covering","title":"GeoStatsBase.boundbox","text":"boundbox(object)\n\nReturn the minimum axis-aligned bounding rectangle of the spatial object.\n\nNotes\n\nEquivalent to cover(object, RectangleCoverer())\n\n\n\n\n\n","category":"function"},{"location":"operations/covering/#Example-1","page":"Covering","title":"Example","text":"","category":"section"},{"location":"operations/covering/#","page":"Covering","title":"Covering","text":"using GeoStats # hide\n\nR = boundbox(RegularGrid(50, 80))\n\nlowerleft(R), upperright(R)","category":"page"},{"location":"operations/covering/#Methods-1","page":"Covering","title":"Methods","text":"","category":"section"},{"location":"operations/covering/#","page":"Covering","title":"Covering","text":"RectangleCoverer","category":"page"},{"location":"operations/covering/#GeoStatsBase.RectangleCoverer","page":"Covering","title":"GeoStatsBase.RectangleCoverer","text":"RectangleCoverer\n\nA method for covering spatial objects with a minimum axis-aligned bounding rectangle (or bounding box).\n\n\n\n\n\n","category":"type"},{"location":"links/#Index-1","page":"Index","title":"Index","text":"","category":"section"},{"location":"links/#","page":"Index","title":"Index","text":"Below is the list of types and functions mentioned in the documentation.","category":"page"},{"location":"links/#Types-1","page":"Index","title":"Types","text":"","category":"section"},{"location":"links/#","page":"Index","title":"Index","text":"Order = [:type]","category":"page"},{"location":"links/#Functions-1","page":"Index","title":"Functions","text":"","category":"section"},{"location":"links/#","page":"Index","title":"Index","text":"Order = [:function]","category":"page"},{"location":"pointpatterns/pointops/#Operations-1","page":"Operations","title":"Operations","text":"","category":"section"},{"location":"pointpatterns/pointops/#","page":"Operations","title":"Operations","text":"Below is the list of currently implemented operations for point processes and patterns.","category":"page"},{"location":"pointpatterns/pointops/#Superposition-1","page":"Operations","title":"Superposition","text":"","category":"section"},{"location":"pointpatterns/pointops/#","page":"Operations","title":"Operations","text":"The union or (superposition) of two point processes creates a union process:","category":"page"},{"location":"pointpatterns/pointops/#","page":"Operations","title":"Operations","text":"union(::PointProcess, ::PointProcess)","category":"page"},{"location":"pointpatterns/pointops/#Base.union-Tuple{PointProcess,PointProcess}","page":"Operations","title":"Base.union","text":"p₁ ∪ p₂\n\nUnion (or superposition) of spatial point processes p₁ and p₂.\n\n\n\n\n\n","category":"method"},{"location":"pointpatterns/pointops/#Thinning-1","page":"Operations","title":"Thinning","text":"","category":"section"},{"location":"pointpatterns/pointops/#","page":"Operations","title":"Operations","text":"The thin function implements the thinning operation for point processes and patterns. Below are the available thinning methods.","category":"page"},{"location":"pointpatterns/pointops/#","page":"Operations","title":"Operations","text":"thin\nRandomThinning","category":"page"},{"location":"pointpatterns/pointops/#PointPatterns.thin","page":"Operations","title":"PointPatterns.thin","text":"thin(p, t)\n\nThin spatial point process p with thinning method t.\n\n\n\n\n\nthin(pp, t)\n\nThin spatial point pattern pp with thinning method t.\n\n\n\n\n\n","category":"function"},{"location":"pointpatterns/pointops/#PointPatterns.RandomThinning","page":"Operations","title":"PointPatterns.RandomThinning","text":"RandomThinning(p)\n\nRandom thining with retention probability p.\n\n\n\n\n\n","category":"type"},{"location":"data/#Spatial-data-1","page":"Data","title":"Spatial data","text":"","category":"section"},{"location":"data/#","page":"Data","title":"Data","text":"Below is the list of currently implemented spatial data types in the project.","category":"page"},{"location":"data/#GeoDataFrame-1","page":"Data","title":"GeoDataFrame","text":"","category":"section"},{"location":"data/#","page":"Data","title":"Data","text":"For point data in spreadsheet format (e.g. CSV, TSV), the GeoDataFrame object is a lightweight wrapper over Julia's DataFrame types.","category":"page"},{"location":"data/#","page":"Data","title":"Data","text":"GeoDataFrame","category":"page"},{"location":"data/#GeoStatsBase.GeoDataFrame","page":"Data","title":"GeoStatsBase.GeoDataFrame","text":"GeoDataFrame(data, coordnames)\n\nA dataframe object data with additional metadata for tracking the columns coordnames that represent spatial coordinates.\n\nExamples\n\nIf the data was already loaded in a normal DataFrame data, and there exists columns named x, y and z, wrap the data and specify the column names:\n\njulia> GeoDataFrame(data, [:x,:y,:z])\n\nAlternatively, load the data directly into a GeoDataFrame object by using the method readgeotable.\n\nNotes\n\nThis type is a lightweight wrapper over Julia's DataFrame types. No additional storage is required other than a vector of symbols with the columns names representing spatial coordinates.\n\n\n\n\n\n","category":"type"},{"location":"data/#","page":"Data","title":"Data","text":"readgeotable","category":"page"},{"location":"data/#GeoStatsBase.readgeotable","page":"Data","title":"GeoStatsBase.readgeotable","text":"readgeotable(args; coordnames=[:x,:y,:z], kwargs)\n\nRead data from disk using CSV.read, optionally specifying the columns coordnames with spatial coordinates.\n\nThe arguments args and keyword arguments kwargs are forwarded to the CSV.read function, please check their documentation for more details.\n\nThis function returns a GeoDataFrame object.\n\n\n\n\n\n","category":"function"},{"location":"data/#PointSetData-1","page":"Data","title":"PointSetData","text":"","category":"section"},{"location":"data/#","page":"Data","title":"Data","text":"The PointSetData object is equivalent to GeoDataFrame except that it stores the data in a Julia OrderedDict instead of in a DataFrame.","category":"page"},{"location":"data/#","page":"Data","title":"Data","text":"PointSetData","category":"page"},{"location":"data/#GeoStatsBase.PointSetData","page":"Data","title":"GeoStatsBase.PointSetData","text":"PointSetData(data, coords)\n\nSpatial data georeferenced with coords, which can be a matrix or a vector of tuples. The data argument is a dictionary mapping variable names to Julia arrays with the actual data.\n\nSee also: PointSet\n\n\n\n\n\n","category":"type"},{"location":"data/#RegularGridData-1","page":"Data","title":"RegularGridData","text":"","category":"section"},{"location":"data/#","page":"Data","title":"Data","text":"In the case that the data is regularly spaced in a grid, the RegularGridData object provides fast access across multiple overlaid images.","category":"page"},{"location":"data/#","page":"Data","title":"Data","text":"RegularGridData","category":"page"},{"location":"data/#GeoStatsBase.RegularGridData","page":"Data","title":"GeoStatsBase.RegularGridData","text":"RegularGridData(data)\nRegularGridData(data, origin, spacing)\n\nRegularly spaced data georeferenced with origin and spacing. The data argument is a dictionary mapping variable names to Julia arrays with the actual data.\n\nNaN or missing values in the Julia arrays are interpreted as non-valid. They can be used to mask the variables on the grid.\n\nExamples\n\nGiven poro and perm two 2-dimensional Julia arrays containing values of porosity and permeability, the following code can be used to georeference the data:\n\njulia> data = OrderedDict(:porosity => poro, :permeability => perm)\njulia> RegularGridData(data, (0.,0.,0.), (1.,1.,1.))\n\nAlternatively, one can omit origin and spacing for default values of zeros and ones:\n\njulia> RegularGridData{Float64}(data)\n\nSee also: RegularGrid\n\n\n\n\n\n","category":"type"},{"location":"data/#StructuredGridData-1","page":"Data","title":"StructuredGridData","text":"","category":"section"},{"location":"data/#","page":"Data","title":"Data","text":"A StructuredGridData is a direct generalization of RegularGridData in which points can be localized in space with indices i,j,k... even though they are not regularly spaced. This format is often found in satellite data, NetCDF, etc.","category":"page"},{"location":"data/#","page":"Data","title":"Data","text":"StructuredGridData","category":"page"},{"location":"data/#GeoStatsBase.StructuredGridData","page":"Data","title":"GeoStatsBase.StructuredGridData","text":"StructuredGridData(data, X, Y, Z, ...)\n\nData spatially distributed on a structured grid where points are georeferenced by coordinates X, Y, Z, ...\n\nThe data argument is a dictionary mapping variable names to Julia arrays with the actual data.\n\nExamples\n\nA very popular structured grid data format is NetCDF. Given 2D arrays LAT and LON with coordinates and arrays with climate data precipitation, temperature, the following code can be used to construct a structured grid:\n\njulia> data = OrderedDict(:precipitation => precipitation, :temperature => temperature)\njulia> StructuredGridData(data, LAT, LON)\n\nSee also: StructuredGrid\n\n\n\n\n\n","category":"type"},{"location":"operations/discretizing/#Discretizing-1","page":"Discretizing","title":"Discretizing","text":"","category":"section"},{"location":"operations/discretizing/#Overview-1","page":"Discretizing","title":"Overview","text":"","category":"section"},{"location":"operations/discretizing/#","page":"Discretizing","title":"Discretizing","text":"Spatial regions can be discretized:","category":"page"},{"location":"operations/discretizing/#","page":"Discretizing","title":"Discretizing","text":"discretize(::AbstractRegion, ::AbstractDiscretizer)","category":"page"},{"location":"operations/discretizing/#GeoStatsBase.discretize-Tuple{AbstractRegion,AbstractDiscretizer}","page":"Discretizing","title":"GeoStatsBase.discretize","text":"discretize(region, discretizer)\n\nDiscretize spatial region with discretizer method.\n\n\n\n\n\n","category":"method"},{"location":"operations/discretizing/#Example-1","page":"Discretizing","title":"Example","text":"","category":"section"},{"location":"operations/discretizing/#","page":"Discretizing","title":"Discretizing","text":"using GeoStats # hide\nusing Plots # hide\ngr(format=:svg) # hide\n\nR = RectangleRegion((0., 0.), (100., 100.))\n\nD = discretize(R, RegularGridDiscretizer((5, 4)))\n\nplot(D)","category":"page"},{"location":"operations/discretizing/#Methods-1","page":"Discretizing","title":"Methods","text":"","category":"section"},{"location":"operations/discretizing/#","page":"Discretizing","title":"Discretizing","text":"RegularGridDiscretizer","category":"page"},{"location":"operations/discretizing/#GeoStatsBase.RegularGridDiscretizer","page":"Discretizing","title":"GeoStatsBase.RegularGridDiscretizer","text":"RegularGridDiscretizer(dims)\n\nDiscretize spatial region into regular grid of given dimensions dims.\n\n\n\n\n\n","category":"type"},{"location":"operations/sampling/#Sampling-1","page":"Sampling","title":"Sampling","text":"","category":"section"},{"location":"operations/sampling/#Overview-1","page":"Sampling","title":"Overview","text":"","category":"section"},{"location":"operations/sampling/#","page":"Sampling","title":"Sampling","text":"Samples can be drawn from spatial objects:","category":"page"},{"location":"operations/sampling/#","page":"Sampling","title":"Sampling","text":"sample(::AbstractSpatialObject, ::AbstractSampler)\nsample(::AbstractSpatialObject, ::Int, ::AbstractVector)","category":"page"},{"location":"operations/sampling/#StatsBase.sample-Tuple{AbstractSpatialObject,AbstractSampler}","page":"Sampling","title":"StatsBase.sample","text":"sample(object, sampler)\n\nSample elements from object with sampler.\n\n\n\n\n\n","category":"method"},{"location":"operations/sampling/#StatsBase.sample-Tuple{AbstractSpatialObject,Int64,AbstractArray{T,1} where T}","page":"Sampling","title":"StatsBase.sample","text":"sample(object, nsamples, [weights], replace=false)\n\nGenerate nsamples samples from spatial object uniformly or using weights, with or without replacement depending on replace option.\n\n\n\n\n\n","category":"method"},{"location":"operations/sampling/#Example-1","page":"Sampling","title":"Example","text":"","category":"section"},{"location":"operations/sampling/#","page":"Sampling","title":"Sampling","text":"using GeoStats # hide\nusing LinearAlgebra # hide\nusing Plots # hide\ngr(format=:svg) # hide\n\nZ = [norm([i,j]) for i in 1:100, j in 1:100]\nΩ = RegularGridData(OrderedDict(:Z=>Z))\n\nS = sample(Ω, 1000, replace=false)\n\nplot(plot(Ω), plot(S))","category":"page"},{"location":"operations/sampling/#Methods-1","page":"Sampling","title":"Methods","text":"","category":"section"},{"location":"operations/sampling/#","page":"Sampling","title":"Sampling","text":"UniformSampler\nBallSampler\nWeightedSampler","category":"page"},{"location":"operations/sampling/#GeoStatsBase.UniformSampler","page":"Sampling","title":"GeoStatsBase.UniformSampler","text":"UniformSampler(size, replace=false)\n\nA method for uniform sampling from spatial objects that produces samples of given size with or without replacement depending on the option replace.\n\n\n\n\n\n","category":"type"},{"location":"operations/sampling/#GeoStatsBase.BallSampler","page":"Sampling","title":"GeoStatsBase.BallSampler","text":"BallSampler(radius; [options])\n\nA method for sampling isolated points from spatial objects using a ball neighborhood of given radius.\n\nOptions\n\nmetric  - Metric for the ball (default to Euclidean())\nmaxsize - Maximum size of the resulting sample (default to none)\n\n\n\n\n\n","category":"type"},{"location":"operations/sampling/#GeoStatsBase.WeightedSampler","page":"Sampling","title":"GeoStatsBase.WeightedSampler","text":"WeightedSampler(size, [weights]; replace=false)\n\nA method for weighted sampling from spatial objects that produces samples of given size based on weights with or without replacement depending on the option replace. By default weights are uniform.\n\n\n\n\n\n","category":"type"},{"location":"operations/weighting/#Weighting-1","page":"Weighting","title":"Weighting","text":"","category":"section"},{"location":"operations/weighting/#Overview-1","page":"Weighting","title":"Overview","text":"","category":"section"},{"location":"operations/weighting/#","page":"Weighting","title":"Weighting","text":"Points or samples in spatial objects can be weighted:","category":"page"},{"location":"operations/weighting/#","page":"Weighting","title":"Weighting","text":"weight(::AbstractSpatialObject, ::AbstractWeighter)","category":"page"},{"location":"operations/weighting/#GeoStatsBase.weight-Tuple{AbstractSpatialObject,AbstractWeighter}","page":"Weighting","title":"GeoStatsBase.weight","text":"weight(object, weighter)\n\nWeight spatial object with weighter method.\n\n\n\n\n\n","category":"method"},{"location":"operations/weighting/#Example-1","page":"Weighting","title":"Example","text":"","category":"section"},{"location":"operations/weighting/#","page":"Weighting","title":"Weighting","text":"using GeoStats # hide\nusing LinearAlgebra # hide\nusing Plots # hide\ngr(format=:svg) # hide\n\nZ = [norm([i,j]) for i in 1:100, j in 1:100]\nΩ = RegularGridData(OrderedDict(:Z=>Z))\nS = sample(Ω, 1000, replace=false)\n\nW = weight(S, BlockWeighter(10.,10.))\n\nplot(plot(S), plot(W))","category":"page"},{"location":"operations/weighting/#Methods-1","page":"Weighting","title":"Methods","text":"","category":"section"},{"location":"operations/weighting/#","page":"Weighting","title":"Weighting","text":"BlockWeighter\nDensityRatioWeighter","category":"page"},{"location":"operations/weighting/#GeoStatsBase.BlockWeighter","page":"Weighting","title":"GeoStatsBase.BlockWeighter","text":"BlockWeighter(sides)\nBlockWeighter(side₁, side₂, ...)\n\nA weighting method that assigns weights to points in spatial object based on blocks of given sides. The number n of points inside a block determines the weights 1/n of these points.\n\n\n\n\n\n","category":"type"},{"location":"operations/weighting/#GeoStatsBase.DensityRatioWeighter","page":"Weighting","title":"GeoStatsBase.DensityRatioWeighter","text":"DensityRatioWeighter(tdata; [options])\n\nDensity ratio weights based on empirical distribution of variables in target data tdata.\n\nOptional parameters\n\nvariables - Variables to consider (default to all)\nestimator - Density ratio estimator (default to LSIF())\noptlib    - Optimization library (default to default_optlib(estimator))\n\nNotes\n\nEstimators from DensityRatioEstimation.jl are supported.\n\n\n\n\n\n","category":"type"},{"location":"about/license/#","page":"License","title":"License","text":"The GeoStats.jl project is licensed under the ISC License:","category":"page"},{"location":"about/license/#","page":"License","title":"License","text":"Copyright (c) 2015, Júlio Hoffimann Mendes\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.","category":"page"},{"location":"pointpatterns/pointprocs/#Processes-1","page":"Processes","title":"Processes","text":"","category":"section"},{"location":"pointpatterns/pointprocs/#","page":"Processes","title":"Processes","text":"Point processes can be simulated with the function rand on different spatial regions:","category":"page"},{"location":"pointpatterns/pointprocs/#","page":"Processes","title":"Processes","text":"rand(::PointProcess, ::AbstractRegion, ::Int)","category":"page"},{"location":"pointpatterns/pointprocs/#Base.rand-Tuple{PointProcess,AbstractRegion,Int64}","page":"Processes","title":"Base.rand","text":"rand(p, r, n=1; [algo])\n\nGenerate n realizations of spatial point process p inside spatial region r. Optionally specify sampling algorithm algo.\n\n\n\n\n\n","category":"method"},{"location":"pointpatterns/pointprocs/#","page":"Processes","title":"Processes","text":"For example, a Poisson process with given intensity in a rectangular region:","category":"page"},{"location":"pointpatterns/pointprocs/#","page":"Processes","title":"Processes","text":"using GeoStats # hide\nusing Plots # hide\ngr(format=:svg) # hide\n\np = PoissonProcess(0.1)\nr = RectangleRegion((0.,0.), (100.,100.))\n\ns = rand(p, r, 2)\n\nplot(plot(s[1]), plot(s[2]))","category":"page"},{"location":"pointpatterns/pointprocs/#","page":"Processes","title":"Processes","text":"or the superposition of two Binomial processes:","category":"page"},{"location":"pointpatterns/pointprocs/#","page":"Processes","title":"Processes","text":"p₁ = BinomialProcess(50)\np₂ = BinomialProcess(50)\np  = p₁ ∪ p₂ # 100 points\n\ns = rand(p, r, 2)\n\nplot(plot(s[1]), plot(s[2]))","category":"page"},{"location":"pointpatterns/pointprocs/#","page":"Processes","title":"Processes","text":"The homogeneity property of a point process can be checked with the ishomogeneous function:","category":"page"},{"location":"pointpatterns/pointprocs/#","page":"Processes","title":"Processes","text":"ishomogeneous","category":"page"},{"location":"pointpatterns/pointprocs/#PointPatterns.ishomogeneous","page":"Processes","title":"PointPatterns.ishomogeneous","text":"ishomogeneous(p)\n\nTells whether or not the spatial point process p is homogeneous.\n\n\n\n\n\n","category":"function"},{"location":"pointpatterns/pointprocs/#","page":"Processes","title":"Processes","text":"Below is the list of currently implemented point processes.","category":"page"},{"location":"pointpatterns/pointprocs/#BinomialProcess-1","page":"Processes","title":"BinomialProcess","text":"","category":"section"},{"location":"pointpatterns/pointprocs/#","page":"Processes","title":"Processes","text":"BinomialProcess","category":"page"},{"location":"pointpatterns/pointprocs/#PointPatterns.BinomialProcess","page":"Processes","title":"PointPatterns.BinomialProcess","text":"BinomialProcess(n)\n\nA Binomial point process with n points.\n\n\n\n\n\n","category":"type"},{"location":"pointpatterns/pointprocs/#PoissonProcess-1","page":"Processes","title":"PoissonProcess","text":"","category":"section"},{"location":"pointpatterns/pointprocs/#","page":"Processes","title":"Processes","text":"PoissonProcess","category":"page"},{"location":"pointpatterns/pointprocs/#PointPatterns.PoissonProcess","page":"Processes","title":"PointPatterns.PoissonProcess","text":"PoissonProcess(λ)\n\nA Poisson process with intensity λ.\n\n\n\n\n\n","category":"type"},{"location":"pointpatterns/pointprocs/#UnionProcess-1","page":"Processes","title":"UnionProcess","text":"","category":"section"},{"location":"pointpatterns/pointprocs/#","page":"Processes","title":"Processes","text":"UnionProcess","category":"page"},{"location":"pointpatterns/pointprocs/#PointPatterns.UnionProcess","page":"Processes","title":"PointPatterns.UnionProcess","text":"UnionProcess(p₁, p₂)\n\nUnion (or superposition) of spatial point processes p₁ and p₂.\n\n\n\n\n\n","category":"type"},{"location":"domains/#Domains-1","page":"Domains","title":"Domains","text":"","category":"section"},{"location":"domains/#","page":"Domains","title":"Domains","text":"Below is the list of currently implemented domain types.","category":"page"},{"location":"domains/#PointSet-1","page":"Domains","title":"PointSet","text":"","category":"section"},{"location":"domains/#","page":"Domains","title":"Domains","text":"PointSet","category":"page"},{"location":"domains/#GeoStatsBase.PointSet","page":"Domains","title":"GeoStatsBase.PointSet","text":"PointSet(coords)\n\nA set of points with coordinate matrix coords. The number of rows of the matrix is the dimensionality of the domain whereas the number of columns is the number of points in the set. Alternatively, coords can be a vector of tuples (i.e. points).\n\n\n\n\n\n","category":"type"},{"location":"domains/#","page":"Domains","title":"Domains","text":"using GeoStats # hide\nusing Plots # hide\ngr(size=(600,600)) # hide\n\nplot(PointSet(rand(3,100)), camera=(30,60))","category":"page"},{"location":"domains/#RegularGrid-1","page":"Domains","title":"RegularGrid","text":"","category":"section"},{"location":"domains/#","page":"Domains","title":"Domains","text":"RegularGrid","category":"page"},{"location":"domains/#GeoStatsBase.RegularGrid","page":"Domains","title":"GeoStatsBase.RegularGrid","text":"RegularGrid(dims, origin, spacing)\n\nA regular grid with dimensions dims, lower left corner at origin and cell spacing spacing. The three arguments must have the same length.\n\nRegularGrid(start, finish, dims=dims)\n\nAlternatively, construct a regular grid from a start point (lower left) to a finish point (upper right).\n\nRegularGrid{T}(dims)\nRegularGrid{T}(dim1, dim2, ...)\n\nFinally, a regular grid can be constructed by only passing the dimensions dims as a tuple, or by passing each dimension dim1, dim2, ... separately. In this case, the origin and spacing default to (0,0,...) and (1,1,...).\n\nExamples\n\nCreate a 3D grid with 100x100x50 locations:\n\njulia> RegularGrid{Float64}(100,100,50)\n\nCreate a 2D grid with 100x100 locations and origin at (10.,20.) units:\n\njulia> RegularGrid((100,100),(10.,20.),(1.,1.))\n\nCreate a 1D grid from -1 to 1 with 100 locations:\n\njulia> RegularGrid((-1.,),(1.,), dims=(100,))\n\n\n\n\n\n","category":"type"},{"location":"domains/#","page":"Domains","title":"Domains","text":"plot(RegularGrid(10,10,10), camera=(30,60))","category":"page"},{"location":"domains/#StructuredGrid-1","page":"Domains","title":"StructuredGrid","text":"","category":"section"},{"location":"domains/#","page":"Domains","title":"Domains","text":"StructuredGrid","category":"page"},{"location":"domains/#GeoStatsBase.StructuredGrid","page":"Domains","title":"GeoStatsBase.StructuredGrid","text":"StructuredGrid(X, Y, Z, ...)\n\nA structured grid with coordinates X, Y, Z, ...\n\nExamples\n\nA 2D structured grid can be constructed from coordinates stored in 2D matrices. For example, we can georeference locations in the Earth surface using LAT and LON coordinates:\n\njulia> StructuredGrid(LAT, LON)\n\n\n\n\n\n","category":"type"},{"location":"domains/#","page":"Domains","title":"Domains","text":"# create 3D coordinates\nnx, ny, nz = 20, 10, 5\nX = [x for x in range(0,10,length=nx), j in 1:ny, k in 1:nz]\nY = sin.(X) .+ [0.5j for i in 1:nx, j in 1:ny, k in 1:nz]\nZ = [1.0(k-1) for i in 1:nx, j in 1:ny, k in 1:nz]\n\ng = StructuredGrid(X, Y, Z)\n\nplot(g, camera=(30,60))","category":"page"},{"location":"solvers/#Solvers-1","page":"Solvers","title":"Solvers","text":"","category":"section"},{"location":"solvers/#","page":"Solvers","title":"Solvers","text":"If you are a developer and your solver is not listed below, please open a pull request and we will be happy to review and add it to the list. Please check the developer guide for instructions on how to write your own solvers.","category":"page"},{"location":"solvers/#Estimation-1","page":"Solvers","title":"Estimation","text":"","category":"section"},{"location":"solvers/#","page":"Solvers","title":"Solvers","text":"Solver Build Coverage Description References\nKriging (Image: ) (Image: ) Kriging (SK, OK, UK, EDK) Matheron 1971\nInvDistWeight (Image: ) (Image: ) Inverse distance weighting Shepard 1968\nLocalWeightRegress (Image: ) (Image: ) Locally weighted regression Cleveland 1979","category":"page"},{"location":"solvers/#Simulation-1","page":"Solvers","title":"Simulation","text":"","category":"section"},{"location":"solvers/#","page":"Solvers","title":"Solvers","text":"All simulation solvers can generate realizations in parallel unless otherwise noted.","category":"page"},{"location":"solvers/#Two-point-1","page":"Solvers","title":"Two-point","text":"","category":"section"},{"location":"solvers/#","page":"Solvers","title":"Solvers","text":"Solver Build Coverage Description References\nDirectGaussSim (Image: ) (Image: ) Direct Gaussian simulation Alabert 1987\nSeqGaussSim (Image: ) (Image: ) Sequential Gaussian simulation Gómez-Hernández 1993\nSpecGaussSim (Image: ) (Image: ) Spectral Gaussian simulation Gutjahr 1997","category":"page"},{"location":"solvers/#Multiple-point-1","page":"Solvers","title":"Multiple-point","text":"","category":"section"},{"location":"solvers/#","page":"Solvers","title":"Solvers","text":"Solver Build Coverage Description References\nImgQuilt (Image: ) (Image: ) Image quilting Hoffimann 2017\nTuringPat (Image: ) (Image: ) Turing patterns Turing 1952","category":"page"},{"location":"solvers/#Meta-1","page":"Solvers","title":"Meta","text":"","category":"section"},{"location":"solvers/#","page":"Solvers","title":"Solvers","text":"Solver Build Coverage Description References\nStratSim (Image: ) (Image: ) Stratigraphy simulation Hoffimann 2018\nCookieCutter (Image: ) (Image: ) Cookie-cutter simulation Begg 1992","category":"page"},{"location":"solvers/#Learning-1","page":"Solvers","title":"Learning","text":"","category":"section"},{"location":"solvers/#","page":"Solvers","title":"Solvers","text":"Solver Build Coverage Description References\nPointwiseLearn (Image: ) (Image: ) Pointwise learning Hoffimann 2018","category":"page"},{"location":"devguide/examples/#Solver-examples-1","page":"Solver examples","title":"Solver examples","text":"","category":"section"},{"location":"devguide/examples/#","page":"Solver examples","title":"Solver examples","text":"Below are examples of solvers written with the framework.","category":"page"},{"location":"devguide/examples/#Estimation-1","page":"Solver examples","title":"Estimation","text":"","category":"section"},{"location":"devguide/examples/#","page":"Solver examples","title":"Solver examples","text":"An estimation solver that, for each location of the domain, assigns the 2-norm of the coordinates as the mean and the ∞-norm as the variance.","category":"page"},{"location":"devguide/examples/#","page":"Solver examples","title":"Solver examples","text":"using GeoStatsBase\nusing LinearAlgebra: norm\n\n# implement method for new solver\nimport GeoStatsBase: solve\n\n@estimsolver NormSolver begin\n  @param pmean = 2\n  @param pvar  = Inf\nend\n\nfunction solve(problem::EstimationProblem, solver::NormSolver)\n  pdomain = domain(problem)\n\n  # results for each variable\n  μs = []; σs = []\n\n  for covars in covariables(problem, solver)\n    for var in covars.names\n      # get user parameters\n      varparams = covars.params[(var,)]\n\n      # get variable type\n      V = variables(problem)[var]\n\n      # allocate memory for result\n      varμ = Vector{V}(undef, npoints(pdomain))\n      varσ = Vector{V}(undef, npoints(pdomain))\n\n      for location in traverse(pdomain, LinearPath())\n        x = coordinates(pdomain, location)\n\n        varμ[location] = norm(x, varparams.pmean)\n        varσ[location] = norm(x, varparams.pvar)\n      end\n\n      push!(μs, var => varμ)\n      push!(σs, var => varσ)\n    end\n  end\n\n  EstimationSolution(pdomain, Dict(μs), Dict(σs))\nend;","category":"page"},{"location":"devguide/examples/#","page":"Solver examples","title":"Solver examples","text":"We can test the newly defined solver on an estimation problem:","category":"page"},{"location":"devguide/examples/#","page":"Solver examples","title":"Solver examples","text":"using GeoStats\nusing Plots\ngr(size=(900,400)) # hide\n\n# dummy spatial data with a single point and no value\nsdata   = PointSetData(OrderedDict(:z => [NaN]), reshape([0.,0.], 2, 1))\n\n# estimate on a regular grid\nsdomain = RegularGrid(100, 100)\n\n# the problem to be solved\nproblem = EstimationProblem(sdata, sdomain, :z)\n\n# our new solver\nsolver = NormSolver()\n\nsolution = solve(problem, solver)\n\ncontourf(solution)\npng(\"../images/normsolver1.png\") # hide","category":"page"},{"location":"devguide/examples/#","page":"Solver examples","title":"Solver examples","text":"(Image: )","category":"page"},{"location":"devguide/examples/#","page":"Solver examples","title":"Solver examples","text":"And assess the behavior of different parameters:","category":"page"},{"location":"devguide/examples/#","page":"Solver examples","title":"Solver examples","text":"solver = NormSolver(:z => (pmean=1,pvar=3))\n\nsolution = solve(problem, solver)\n\ncontourf(solution)\nsavefig(\"../images/normsolver2.svg\") # hide","category":"page"},{"location":"devguide/examples/#","page":"Solver examples","title":"Solver examples","text":"(Image: )","category":"page"},{"location":"devguide/examples/#Simulation-1","page":"Solver examples","title":"Simulation","text":"","category":"section"},{"location":"devguide/examples/#","page":"Solver examples","title":"Solver examples","text":"A simulation solver that, for each location of the domain, assigns a random sample from a Gaussian distribution.","category":"page"},{"location":"devguide/examples/#","page":"Solver examples","title":"Solver examples","text":"using GeoStatsBase\n\n# implement method for new solver\nimport GeoStatsBase: solvesingle\n\n@simsolver RandSolver begin\n  @param mean = 0\n  @param var  = 1\nend\n\nfunction solvesingle(problem::SimulationProblem, covars::NamedTuple,\n                     solver::RandSolver, preproc)\n  pdomain = domain(problem)\n\n  real4var = map(covars.names) do var\n    # retrieve solver parameters\n    varparams = covars.params[(var,)]\n    μ, σ² = varparams.mean, varparams.var\n\n    # i.i.d. samples ~ Normal(0,1)\n    z = rand(npoints(pdomain))\n\n    # rescale and return\n    var => μ .+ sqrt(σ²) .* z\n  end\n\n  Dict(real4var)\nend;","category":"page"},{"location":"devguide/examples/#","page":"Solver examples","title":"Solver examples","text":"We can test the newly defined solver in a simulation problem:","category":"page"},{"location":"devguide/examples/#","page":"Solver examples","title":"Solver examples","text":"using GeoStats\nusing Plots\ngr(size=(900,300)) # hide\n\n# simulate on a regular grid\nsdomain = RegularGrid(100, 100)\n\n# the problem to be solved\nproblem = SimulationProblem(sdomain, :z => Float64, 3)\n\n# our new solver\nsolver = RandSolver(:z => (mean=10.,var=10.))\n\nsolution = solve(problem, solver)\n\nheatmap(solution)\nsavefig(\"../images/randsolver1.svg\") # hide","category":"page"},{"location":"devguide/examples/#","page":"Solver examples","title":"Solver examples","text":"(Image: )","category":"page"},{"location":"devguide/examples/#","page":"Solver examples","title":"Solver examples","text":"Note, however, that we did not define the preprocess function for the solver. This function can be used to avoid recalculations for each realization, and to set default parameters for variables that are not explicitly set by users in the solver constructor:","category":"page"},{"location":"devguide/examples/#","page":"Solver examples","title":"Solver examples","text":"import GeoStatsBase: preprocess\n\nfunction preprocess(problem::SimulationProblem, solver::RandSolver)\n  preproc = Dict()\n  for covars in covariables(problem, solver)\n    for varname in covars.names\n      varparams = covars.params[(varname,)]\n      preproc[varname] = (mean=varparams.mean, var=varparams.var)\n    end\n  end\n\n  preproc\nend;","category":"page"},{"location":"devguide/examples/#","page":"Solver examples","title":"Solver examples","text":"We can call the preprocess function on problems with multiple variables to check that the solver is producing default values for variables other than the one passed during construction:","category":"page"},{"location":"devguide/examples/#","page":"Solver examples","title":"Solver examples","text":"problem = SimulationProblem(sdomain, (:z=>Float64, :w=>Float64), 3)\n\npreprocess(problem, solver)","category":"page"},{"location":"devguide/examples/#","page":"Solver examples","title":"Solver examples","text":"This preproc output is passed by GeoStats.jl as the last argument to the solvesingle function, which could be reimplemented as follows:","category":"page"},{"location":"devguide/examples/#","page":"Solver examples","title":"Solver examples","text":"function solvesingle(problem::SimulationProblem, covars::NamedTuple,\n                     solver::RandSolver, preproc)\n  pdomain = domain(problem)\n\n  real4var = map(covars.names) do var\n    # retrieve solver parameters\n    μ, σ² = preproc[var]\n\n    # i.i.d. samples ~ Normal(0,1)\n    z = rand(npoints(pdomain))\n\n    # rescale and return\n    var => μ .+ sqrt(σ²) .* z\n  end\n\n  Dict(real4var)\nend;","category":"page"},{"location":"devguide/examples/#Learning-1","page":"Solver examples","title":"Learning","text":"","category":"section"},{"location":"devguide/examples/#","page":"Solver examples","title":"Solver examples","text":"A learning solver that clusters data into super pixels:","category":"page"},{"location":"devguide/examples/#","page":"Solver examples","title":"Solver examples","text":"using GeoStatsBase\n\n# implement method for new solver\nimport GeoStatsBase: solvesingle\n\nstruct SLICSolver <: AbstractLearningSolver\n  k::Int # approximate number of super pixels\n  m::Float64 # SLIC tradeoff parameter\nend\n\nfunction solve(problem::LearningProblem, solver::SLICSolver)\n  @assert task(problem) isa ClusteringTask \"invalid problem\"\n\n  # retrieve problem info\n  ptask  = task(problem)\n  feats  = collect(features(ptask))\n  tdata  = targetdata(problem)\n  output = outputvars(ptask)[1]\n\n  # find super pixels\n  slic = SLICPartitioner(solver.k, solver.m, vars=feats)\n  part = partition(tdata, slic)\n\n  # label for each point in target data\n  labels = Vector{Int}(undef, npoints(tdata))\n  for (i, inds) in enumerate(subsets(part))\n    labels[inds] .= i\n  end\n\n  # return learning solution\n  LearningSolution(domain(tdata), OrderedDict(output => labels))\nend;","category":"page"},{"location":"devguide/examples/#","page":"Solver examples","title":"Solver examples","text":"We can test the newly defined solver in a learning problem:","category":"page"},{"location":"devguide/examples/#","page":"Solver examples","title":"Solver examples","text":"using GeoStats\nusing Plots\ngr(size=(900,300)) # hide\n\nZ = [10sin(i/10) + j for i in 1:100, j in 1:100]\n\nΩ = RegularGridData(OrderedDict(:Z=>Z))\n\nt = ClusteringTask(:Z, :SUPERPIXEL)\n\np = LearningProblem(Ω, Ω, t)\n\ns = solve(p, SLICSolver(50, 0.01))\n\nplot(plot(Ω), plot(s, c=:viridis))\nsavefig(\"../images/slicsolver.svg\") # hide","category":"page"},{"location":"devguide/examples/#","page":"Solver examples","title":"Solver examples","text":"(Image: )","category":"page"},{"location":"devguide/basics/#The-basics-1","page":"The basics","title":"The basics","text":"","category":"section"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"After reading this guide, you should be able to write your own geostatistical solver, and enjoy a large set of features for free, including distributed parallel execution, a suite of meta algorithms, and various plot recipes. If you have any questions, please don't hesitate to ask in our gitter channel.","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"Currently, there are three types of spatial problems defined in the framework:","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"EstimationProblem\nSimulationProblem\nLearningProblem","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"For each problem type, there is a corresponding solution type:","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"EstimationSolution\nSimulationSolution\nLearningSolution","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"Any EstimationSolver in the framework returns an EstimationSolution, which consists of the domain of the EstimationProblem plus two dictionaries: mdict mapping the variable names (a Symbol) of the problem to mean values, and vdict mapping the same variable names to variance values:","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"EstimationSolution(domain, mdict, vdict)","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"Any SimulationSolver in the framework returns a SimulationSolution, which consists of the domain of the SimulationProblem plus a dictionary rdict mapping the variable names (a Symbol) of the problem to a vector of (flattened) realizations:","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"SimulationSolution(domain, rdict)","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"Any LearningSolver in the framework returns a LearningSolution, which consits of the target domain of the LearningProblem plus a dictionary dict mapping variable names (a Symbol) of the problem to learned values:","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"LearningSolution(domain, dict)","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"These definitions are implemented in the GeoStatsBase.jl package alongside other important conceptual components of the project.","category":"page"},{"location":"devguide/basics/#How-to-write-a-solver-1","page":"The basics","title":"How to write a solver","text":"","category":"section"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"The task of writing a solver for a spatial problem as defined consists of writing a simple function in Julia that takes the problem as input and returns the solution. In this section, an estimation solver is written that is not very useful (it fills the domain with random numbers), but that illustrates the development process.","category":"page"},{"location":"devguide/basics/#Writing-estimation-solvers-1","page":"The basics","title":"Writing estimation solvers","text":"","category":"section"},{"location":"devguide/basics/#Create-the-package-1","page":"The basics","title":"Create the package","text":"","category":"section"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"Install the PkgTemplates.jl package and create a new project:","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"using PkgTemplates\n\ngenerate_interactive(\"MySolver\")","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"This command will create a folder named ~/user/.julia/vx.y/MySolver with all the files that are necessary to load the new package:","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"using MySolver","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"Choose a license for your solver. If you don't have major restrictions, I suggest using the ISC license. This license is equivalent to the MIT and BSD 2-Clause licenses, plus it eliminates unncessary language. Try to choose a permissive license so that your solver can be used, and improved by private companies.","category":"page"},{"location":"devguide/basics/#Import-GeoStatsBase-1","page":"The basics","title":"Import GeoStatsBase","text":"","category":"section"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"After the package is created, open the main source file MySolver.jl and add the following line:","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"using GeoStatsBase\nimport GeoStatsBase: solve","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"These lines bring all the symbols defined in GeoStatsBase into scope, and tell Julia that the method solve will be specialized for the new solver. Next, give your solver a name:","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"struct MyCoolSolver <: AbstractEstimationSolver\n  # optional parameters go here\nend","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"and export it so that it becomes available to users of your package:","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"export MyCoolSolver","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"At this point, the MySolver.jl file should have the following content:","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"module MySolver\n\nusing GeoStatsBase\nimport GeoStatsBase: solve\n\nexport MyCoolSolver\n\nstruct MyCoolSolver <: AbstractEstimationSolver\n  # optional parameters go here\nend\n\nend # module","category":"page"},{"location":"devguide/basics/#Write-the-algorithm-1","page":"The basics","title":"Write the algorithm","text":"","category":"section"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"Now that your solver type is defined, write your algorithm. Write a function called solve that takes an estimation problem and your solver, and returns an estimation solution:","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"function solve(problem::EstimationProblem, solver::MyCoolSolver)\n  pdomain = domain(problem)\n\n  mean = Dict{Symbol,Vector}()\n  variance = Dict{Symbol,Vector}()\n\n  for (var,V) in variables(problem)\n    push!(mean, var => rand(npoints(pdomain)))\n    push!(variance, var => rand(npoints(pdomain)))\n  end\n\n  EstimationSolution(pdomain, mean, variance)\nend","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"Paste this function somewhere in your package, and you are all set.","category":"page"},{"location":"devguide/basics/#Test-the-solver-1","page":"The basics","title":"Test the solver","text":"","category":"section"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"To test your new solver, load the GeoStats.jl package and solve a simple problem:","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"using GeoStats\nusing MySolver\n\nsdata    = readgeotable(\"samples.csv\", coordnames=[:x,:y])\nsdomain  = RegularGrid(100, 100)\nproblem  = EstimationProblem(sdata, sdomain, :value)\n\nsolution = solve(problem, MyCoolSolver())\n\nplot(solution)","category":"page"},{"location":"devguide/basics/#Writing-simulation-solvers-1","page":"The basics","title":"Writing simulation solvers","text":"","category":"section"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"The process of writing a simulation solver is very similar, but there is an alternative function to solve called solvesingle that is preferred. The function solvesingle takes a simulation problem, one of the variables to be simulated, a solver, and a preprocessed input, and returns a vector with the simulation results:","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"function solvesingle(problem::SimulationProblem, covars::NamedTuple,\n                     solver::MySimSolver, preproc)\n  # retrieve problem info\n  pdata = data(problem)\n  pdomain = domain(problem)\n\n  real4var = map(covars.names) do var\n    # output is a single realization for each covariable\n    real = Vector{V}(undef, npoints(pdomain))\n\n    # fill realization with hard data\n    for (loc, datloc) in datamap(problem, var)\n      real[loc] = pdata[datloc,var]\n    end\n\n    # algorithm goes here\n    # ...\n\n    var => real\n  end\n\n  Dict(real4var)\nend","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"This function is preferred over solve if your algorithm is the same for every single realization (the algorithm is only a function of the random seed). In this case, GeoStats.jl will provide an implementation of solve for you that calls solvesingle in parallel.","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"The argument preproc is ignored unless the function preprocess is also defined for the solver. The function takes a simulation problem and a solver, and returns an arbitrary object with preprocessed data:","category":"page"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"preprocess(problem::SimulationProblem, solver::MySimSolver) = nothing","category":"page"},{"location":"devguide/basics/#Writing-learning-solvers-1","page":"The basics","title":"Writing learning solvers","text":"","category":"section"},{"location":"devguide/basics/#","page":"The basics","title":"The basics","text":"Similar to the other cases, writing a LearningSolver compatible with the framework consists of writing a simple Julia function that takes the LearningProblem as input along with the solver, and returns a LearningSolution.","category":"page"},{"location":"operations/joining/#Joining-1","page":"Joining","title":"Joining","text":"","category":"section"},{"location":"operations/joining/#Overview-1","page":"Joining","title":"Overview","text":"","category":"section"},{"location":"operations/joining/#","page":"Joining","title":"Joining","text":"Multiple spatial objects can be joined into a single object:","category":"page"},{"location":"operations/joining/#","page":"Joining","title":"Joining","text":"join(::AbstractSpatialObject, ::AbstractSpatialObject, ::AbstractJoiner)","category":"page"},{"location":"operations/joining/#Base.join-Tuple{AbstractSpatialObject,AbstractSpatialObject,AbstractJoiner}","page":"Joining","title":"Base.join","text":"join(object₁, object₂, joiner)\n\nJoin spatial object object₁ and object₂ with joiner method.\n\n\n\n\n\n","category":"method"},{"location":"operations/joining/#Example-1","page":"Joining","title":"Example","text":"","category":"section"},{"location":"operations/joining/#","page":"Joining","title":"Joining","text":"using GeoStats # hide\n\nΩ = RegularGridData(OrderedDict(:Z=>rand(100,100)))\n\njoin(Ω, Ω, VariableJoiner())","category":"page"},{"location":"operations/joining/#Methods-1","page":"Joining","title":"Methods","text":"","category":"section"},{"location":"operations/joining/#","page":"Joining","title":"Joining","text":"VariableJoiner","category":"page"},{"location":"operations/joining/#GeoStatsBase.VariableJoiner","page":"Joining","title":"GeoStatsBase.VariableJoiner","text":"VariableJoiner()\n\nJoin spatial data with shared domain to produce spatial data with all variables included.\n\n\n\n\n\n","category":"type"},{"location":"operations/partitioning/#Partitioning-1","page":"Partitioning","title":"Partitioning","text":"","category":"section"},{"location":"operations/partitioning/#Overview-1","page":"Partitioning","title":"Overview","text":"","category":"section"},{"location":"operations/partitioning/#","page":"Partitioning","title":"Partitioning","text":"A spatial object can be partitioned into various sub-objects:","category":"page"},{"location":"operations/partitioning/#","page":"Partitioning","title":"Partitioning","text":"partition(::AbstractSpatialObject, ::AbstractPartitioner)","category":"page"},{"location":"operations/partitioning/#GeoStatsBase.partition-Tuple{AbstractSpatialObject,AbstractPartitioner}","page":"Partitioning","title":"GeoStatsBase.partition","text":"partition(object, partitioner)\n\nPartition object with partition method partitioner.\n\n\n\n\n\n","category":"method"},{"location":"operations/partitioning/#","page":"Partitioning","title":"Partitioning","text":"Other utility functions are available, which are implemented with the general partition function:","category":"page"},{"location":"operations/partitioning/#","page":"Partitioning","title":"Partitioning","text":"split(::AbstractSpatialObject, ::Real)","category":"page"},{"location":"operations/partitioning/#Base.split-Tuple{AbstractSpatialObject,Real}","page":"Partitioning","title":"Base.split","text":"split(object, fraction, [normal])\n\nSplit spatial object into two parts where the first part has a fraction of the total volume. The split is performed along a normal direction. The default direction is aligned with the first spatial dimension of the object.\n\n\n\n\n\n","category":"method"},{"location":"operations/partitioning/#","page":"Partitioning","title":"Partitioning","text":"groupby(::AbstractData, ::Symbol)","category":"page"},{"location":"operations/partitioning/#DataFrames.groupby-Tuple{AbstractData,Symbol}","page":"Partitioning","title":"DataFrames.groupby","text":"groupby(sdata, var)\n\nPartition spatial data sdata into groups of constant value for spatial variable var.\n\nNotes\n\nMissing values are grouped into a separate group.\n\n\n\n\n\n","category":"method"},{"location":"operations/partitioning/#Example-1","page":"Partitioning","title":"Example","text":"","category":"section"},{"location":"operations/partitioning/#","page":"Partitioning","title":"Partitioning","text":"using GeoStats # hide\nusing LinearAlgebra # hide\nusing Plots # hide\ngr(format=:svg) # hide\n\nZ = [norm([i,j]) for i in 1:100, j in 1:100]\nΩ = RegularGridData(OrderedDict(:Z=>Z))\n\nΠ = partition(Ω, BlockPartitioner(10.,10.))\n\nplot(plot(Ω), plot(Π))","category":"page"},{"location":"operations/partitioning/#Methods-1","page":"Partitioning","title":"Methods","text":"","category":"section"},{"location":"operations/partitioning/#","page":"Partitioning","title":"Partitioning","text":"UniformPartitioner\nFractionPartitioner\nSLICPartitioner\nBlockPartitioner\nBisectPointPartitioner\nBisectFractionPartitioner\nBallPartitioner\nPlanePartitioner\nDirectionPartitioner\nVariablePartitioner\nPredicatePartitioner\nSpatialPredicatePartitioner\nProductPartitioner\nHierarchicalPartitioner","category":"page"},{"location":"operations/partitioning/#GeoStatsBase.UniformPartitioner","page":"Partitioning","title":"GeoStatsBase.UniformPartitioner","text":"UniformPartitioner(k, [shuffle])\n\nA method for partitioning spatial data uniformly into k subsets of approximately equal size. Optionally shuffle the data (default to true).\n\n\n\n\n\n","category":"type"},{"location":"operations/partitioning/#GeoStatsBase.FractionPartitioner","page":"Partitioning","title":"GeoStatsBase.FractionPartitioner","text":"FractionPartitioner(fraction, shuffle=true)\n\nA method for partitioning spatial objects according to a given fraction. Optionally shuffle elements before partitioning.\n\n\n\n\n\n","category":"type"},{"location":"operations/partitioning/#GeoStatsBase.SLICPartitioner","page":"Partitioning","title":"GeoStatsBase.SLICPartitioner","text":"SLICPartitioner(k, m; tol=1e-4, maxiter=10, vars=nothing)\n\nA method for partitioning spatial data into approximately k clusters using Simple Linear Iterative Clustering (SLIC). The method produces clusters of samples that are spatially connected based on a distance dₛ and that, at the same time, are similar in terms of vars with distance dᵥ. The tradeoff is controlled with a hyperparameter parameter m in an additive model dₜ = √(dᵥ² + m²(dₛ/s)²).\n\nParameters\n\nk       - Approximate number of clusters\nm       - Hyperparameter of SLIC model\ntol     - Tolerance of k-means algorithm (default to 1e-4)\nmaxiter - Maximum number of iterations (default to 10)\nvars    - Variables (or features) to consider (default to all)\n\nReferences\n\nAchanta et al. 2011. SLIC superpixels compared to state-of-the-art superpixel methods\n\n\n\n\n\n","category":"type"},{"location":"operations/partitioning/#GeoStatsBase.BlockPartitioner","page":"Partitioning","title":"GeoStatsBase.BlockPartitioner","text":"BlockPartitioner(sides)\nBlockPartitioner(side₁, side₂, ...)\n\nA method for partitioning spatial objects into blocks of given sides.\n\n\n\n\n\n","category":"type"},{"location":"operations/partitioning/#GeoStatsBase.BisectPointPartitioner","page":"Partitioning","title":"GeoStatsBase.BisectPointPartitioner","text":"BisectPointPartitioner(normal, point)\n\nA method for partitioning spatial data into two half spaces defined by a normal direction and a reference point.\n\n\n\n\n\n","category":"type"},{"location":"operations/partitioning/#GeoStatsBase.BisectFractionPartitioner","page":"Partitioning","title":"GeoStatsBase.BisectFractionPartitioner","text":"BisectFractionPartitioner(normal, fraction=0.5, maxiter=10)\n\nA method for partitioning spatial data into two half spaces defined by a normal direction and a fraction of points. The partition is returned within maxiter bisection iterations.\n\n\n\n\n\n","category":"type"},{"location":"operations/partitioning/#GeoStatsBase.BallPartitioner","page":"Partitioning","title":"GeoStatsBase.BallPartitioner","text":"BallPartitioner(radius; metric=Euclidean())\n\nA method for partitioning spatial objects into balls of a given radius using a metric.\n\n\n\n\n\n","category":"type"},{"location":"operations/partitioning/#GeoStatsBase.PlanePartitioner","page":"Partitioning","title":"GeoStatsBase.PlanePartitioner","text":"PlanePartitioner(normal; tol=1e-6)\n\nA method for partitioning spatial data into a family of hyperplanes defined by a normal direction. Two points x and y belong to the same hyperplane when (x - y) ⋅ normal < tol.\n\n\n\n\n\n","category":"type"},{"location":"operations/partitioning/#GeoStatsBase.DirectionPartitioner","page":"Partitioning","title":"GeoStatsBase.DirectionPartitioner","text":"DirectionPartitioner(direction; tol=1e-6)\n\nA method for partitioning spatial objects along a given direction with bandwidth tolerance tol.\n\n\n\n\n\n","category":"type"},{"location":"operations/partitioning/#GeoStatsBase.VariablePartitioner","page":"Partitioning","title":"GeoStatsBase.VariablePartitioner","text":"VariablePartitioner(var)\n\nA method for partitioning spatial data into subsets of constant value for variable var.\n\n\n\n\n\n","category":"type"},{"location":"operations/partitioning/#GeoStatsBase.PredicatePartitioner","page":"Partitioning","title":"GeoStatsBase.PredicatePartitioner","text":"PredicatePartitioner(pred)\n\nA method for partitioning spatial objects with a given predicate function pred(i, j).\n\n\n\n\n\n","category":"type"},{"location":"operations/partitioning/#GeoStatsBase.SpatialPredicatePartitioner","page":"Partitioning","title":"GeoStatsBase.SpatialPredicatePartitioner","text":"SpatialPredicatePartitioner(pred)\n\nA method for partitioning spatial objects with a given spatial predicate function pred(x, y).\n\n\n\n\n\n","category":"type"},{"location":"operations/partitioning/#GeoStatsBase.ProductPartitioner","page":"Partitioning","title":"GeoStatsBase.ProductPartitioner","text":"ProductPartitioner(p₁, p₂)\n\nA method for partitioning spatial objects using the product of two partitioners p₁ and p₂.\n\n\n\n\n\n","category":"type"},{"location":"operations/partitioning/#GeoStatsBase.HierarchicalPartitioner","page":"Partitioning","title":"GeoStatsBase.HierarchicalPartitioner","text":"HierarchicalPartitioner(first, second)\n\nA partitioning method in which a first partition is applied and then a second partition is applied to each subset of the first.\n\n\n\n\n\n","category":"type"},{"location":"operations/searching/#Searching-1","page":"Searching","title":"Searching","text":"","category":"section"},{"location":"operations/searching/#Overview-1","page":"Searching","title":"Overview","text":"","category":"section"},{"location":"operations/searching/#","page":"Searching","title":"Searching","text":"Neighbors of a point or sample can be searched efficiently:","category":"page"},{"location":"operations/searching/#","page":"Searching","title":"Searching","text":"search(::AbstractVector, ::AbstractNeighborSearcher)\nsearch(::Int, ::AbstractNeighborSearcher)","category":"page"},{"location":"operations/searching/#GeoStatsBase.search-Tuple{AbstractArray{T,1} where T,AbstractNeighborSearcher}","page":"Searching","title":"GeoStatsBase.search","text":"search(xₒ, searcher, mask=nothing)\n\nReturn neighbors of coordinates xₒ using searcher and a mask over the spatial object.\n\n\n\n\n\n","category":"method"},{"location":"operations/searching/#GeoStatsBase.search-Tuple{Int64,AbstractNeighborSearcher}","page":"Searching","title":"GeoStatsBase.search","text":"search(location, searcher, mask=nothing)\n\nReturn neighbors of location in spatial object using searcher and a mask.\n\n\n\n\n\n","category":"method"},{"location":"operations/searching/#Example-1","page":"Searching","title":"Example","text":"","category":"section"},{"location":"operations/searching/#","page":"Searching","title":"Searching","text":"using GeoStats # hide\nusing LinearAlgebra # hide\nusing Plots # hide\ngr(format=:svg) # hide\n\nZ = [norm([i,j]) for i in 1:100, j in 1:100]\nΩ = RegularGridData(OrderedDict(:Z=>Z))\n\n# construct searcher\nb = BallNeighborhood{2}(20.)\ns = NeighborhoodSearcher(Ω, b)\n\n# query neighbors of point\ninds = search([50.,50.], s)\n𝒩 = view(Ω, inds)\n\np₁ = plot(Ω)\np₂ = plot(𝒩, lims=(0,100))\n\nplot(p₁, p₂)","category":"page"},{"location":"operations/searching/#Methods-1","page":"Searching","title":"Methods","text":"","category":"section"},{"location":"operations/searching/#","page":"Searching","title":"Searching","text":"NeighborhoodSearcher\nNearestNeighborSearcher\nBoundedSearcher","category":"page"},{"location":"operations/searching/#GeoStatsBase.NeighborhoodSearcher","page":"Searching","title":"GeoStatsBase.NeighborhoodSearcher","text":"NeighborhoodSearcher(object, neighborhood)\n\nA method for searching neighbors in spatial object inside neighborhood.\n\n\n\n\n\n","category":"type"},{"location":"operations/searching/#GeoStatsBase.NearestNeighborSearcher","page":"Searching","title":"GeoStatsBase.NearestNeighborSearcher","text":"NearestNeighborSearcher(object, k; locations=all, metric=Euclidean())\n\nA method for searching k nearest neighbors in spatial object locations according to metric.\n\n\n\n\n\n","category":"type"},{"location":"operations/searching/#GeoStatsBase.BoundedSearcher","page":"Searching","title":"GeoStatsBase.BoundedSearcher","text":"BoundedSearcher(searcher, nmax)\n\nA method for searching at most nmax neighbors using searcher.\n\n\n\n\n\n","category":"type"},{"location":"operations/filtering/#Filtering-1","page":"Filtering","title":"Filtering","text":"","category":"section"},{"location":"operations/filtering/#Overview-1","page":"Filtering","title":"Overview","text":"","category":"section"},{"location":"operations/filtering/#","page":"Filtering","title":"Filtering","text":"Spatial objects can be filtered:","category":"page"},{"location":"operations/filtering/#","page":"Filtering","title":"Filtering","text":"filter(::AbstractSpatialObject, ::AbstractFilter)\nuniquecoords","category":"page"},{"location":"operations/filtering/#Base.filter-Tuple{AbstractSpatialObject,AbstractFilter}","page":"Filtering","title":"Base.filter","text":"filter(object, filt)\n\nFilter spatial object with filtering method filt.\n\n\n\n\n\n","category":"method"},{"location":"operations/filtering/#GeoStatsBase.uniquecoords","page":"Filtering","title":"GeoStatsBase.uniquecoords","text":"uniquecoords(sdata; aggreg=Dict())\n\nFilter spatial data sdata to produce a new data set with unique coordinates.\n\nSee UniqueCoordsFilter for more details.\n\n\n\n\n\n","category":"function"},{"location":"operations/filtering/#Example-1","page":"Filtering","title":"Example","text":"","category":"section"},{"location":"operations/filtering/#","page":"Filtering","title":"Filtering","text":"using GeoStats # hide\n\nΩ = PointSetData(OrderedDict(:Z=>[0, 1, 0]), [0. 1. 0.; 0. 0. 0.])\n\nΓ = uniquecoords(Ω)\n\ncoordinates(Γ)","category":"page"},{"location":"operations/filtering/#Methods-1","page":"Filtering","title":"Methods","text":"","category":"section"},{"location":"operations/filtering/#","page":"Filtering","title":"Filtering","text":"UniqueCoordsFilter","category":"page"},{"location":"operations/filtering/#GeoStatsBase.UniqueCoordsFilter","page":"Filtering","title":"GeoStatsBase.UniqueCoordsFilter","text":"UniqueCoordsFilter(aggreg)\n\nA filter method to retain locations in spatial objects with unique coordinates.\n\nDuplicates of a variable var are aggregated with aggregation function aggreg[var]. Default aggregation function is mean for continuous variables and first otherwise.\n\n\n\n\n\n","category":"type"},{"location":"pointpatterns/regions/#Regions-1","page":"Regions","title":"Regions","text":"","category":"section"},{"location":"pointpatterns/regions/#","page":"Regions","title":"Regions","text":"Below is the list of currently implemented spatial regions for point pattern analysis and synthesis.","category":"page"},{"location":"pointpatterns/regions/#RectangleRegion-1","page":"Regions","title":"RectangleRegion","text":"","category":"section"},{"location":"pointpatterns/regions/#","page":"Regions","title":"Regions","text":"RectangleRegion","category":"page"},{"location":"pointpatterns/regions/#GeoStatsBase.RectangleRegion","page":"Regions","title":"GeoStatsBase.RectangleRegion","text":"RectangleRegion{T,N}\n\nA rectangle region in N-dimensional space with coordinates of type T.\n\n\n\n\n\n","category":"type"},{"location":"resources/#Resources-1","page":"Resources","title":"Resources","text":"","category":"section"},{"location":"resources/#","page":"Resources","title":"Resources","text":"Geostatistics is often misunderstood as \"classical statistics applied to spatial data\". To correct this unfortunate misunderstanding, the best we can do as a community is to list additional learning resources for newcomers. Below is one such a list including related projects with clarifying comments, links to papers, books and video lectures.","category":"page"},{"location":"resources/#Related-projects-1","page":"Resources","title":"Related projects","text":"","category":"section"},{"location":"resources/#GaussianProcesses.jl-1","page":"Resources","title":"GaussianProcesses.jl","text":"","category":"section"},{"location":"resources/#","page":"Resources","title":"Resources","text":"GaussianProcesses.jl - Gaussian processes (the method) and Simple Kriging are essentially two names for the same concept. The derivation of Kriging estimators, however; does not require distributional assumptions. It is a beautiful coincidence that for multivariate Gaussian distributions, Simple Kriging gives the conditional expectation. Matheron and other important geostatisticians have generalized Gaussian processes to more general random fields with locally-varying mean and for situations where the mean is unknown. GeoStats.jl includes Gaussian processes as a special case as well as other more practical Kriging variants, see the Gaussian processes example.","category":"page"},{"location":"resources/#MLKernels.jl-1","page":"Resources","title":"MLKernels.jl","text":"","category":"section"},{"location":"resources/#","page":"Resources","title":"Resources","text":"MLKernels.jl - Spatial structure can be represented in many different forms: covariance, variogram, correlogram, etc. Variograms are more general than covariance kernels according to the intrinsic stationary property. This means that there are variogram models with no covariance counterpart. Furthermore, empirical variograms can be easily estimated from the data (in various directions) with an efficient procedure. GeoStats.jl treats variograms as first-class objects, see the Variogram modeling example.","category":"page"},{"location":"resources/#Interpolations.jl-1","page":"Resources","title":"Interpolations.jl","text":"","category":"section"},{"location":"resources/#","page":"Resources","title":"Resources","text":"Interpolations.jl - Kriging and Spline interpolation have different purposes, yet these two methods are sometimes listed as competing alternatives. Kriging estimation is about minimizing variance (or estimation error), whereas Spline interpolation is about forcedly smooth estimators derived for computer visualization. Kriging is a generalization of Splines in which one has the freedom to customize spatial structure based on data. Besides the estimate itself, Kriging also provides the variance map as a function of knots configuration.","category":"page"},{"location":"resources/#MLJ.jl-1","page":"Resources","title":"MLJ.jl","text":"","category":"section"},{"location":"resources/#","page":"Resources","title":"Resources","text":"MLJ.jl - Statistical learning (a.k.a. machine learning) theory relies on a set of assumptions that do not hold with spatial data (e.g i.i.d. samples on fixed-size support, stationarity, to name a few). Geostatistical learning theory generalizes traditional machine learning for applications where statistical models need to be learned from spatial data.","category":"page"},{"location":"resources/#Learning-resources-1","page":"Resources","title":"Learning resources","text":"","category":"section"},{"location":"resources/#Books-1","page":"Resources","title":"Books","text":"","category":"section"},{"location":"resources/#","page":"Resources","title":"Resources","text":"Isaaks, E. and Srivastava, R. 1990. An Introduction to Applied Geostatistics - An introductory book on geostatistics that covers important concepts with very simple language.\nChilès, JP and Delfiner, P. 2012. Geostatistics: Modeling Spatial Uncertainty - An incredible book for those with good mathematical background.","category":"page"},{"location":"resources/#Lectures-1","page":"Resources","title":"Lectures","text":"","category":"section"},{"location":"resources/#","page":"Resources","title":"Resources","text":"Júlio Hoffimann - Tutorials on geostatistics with the GeoStats.jl project.\nEdward Isaaks - Video lectures on variography, Kriging and related concepts.\nJef Caers - Video lectures on two-point and multiple-point methods.","category":"page"},{"location":"variography/fitting/#Fitting-variograms-1","page":"Fitting variograms","title":"Fitting variograms","text":"","category":"section"},{"location":"variography/fitting/#","page":"Fitting variograms","title":"Fitting variograms","text":"Fitting theoretical variograms to empirical observations is an important preprocessing step to ensure valid mathematical models of spatial continuity. Given an empirical variogram, the fit function can be used to perform the fit:","category":"page"},{"location":"variography/fitting/#","page":"Fitting variograms","title":"Fitting variograms","text":"fit(::Type{Variogram}, ::EmpiricalVariogram, ::VariogramFitAlgo)","category":"page"},{"location":"variography/fitting/#StatsBase.fit-Tuple{Type{Variogram},EmpiricalVariogram,VariogramFitAlgo}","page":"Fitting variograms","title":"StatsBase.fit","text":"fit(V, γ, [algo])\n\nFit theoretical variogram type V to empirical variogram γ using algorithm algo. Default algorithm is WeightedLeastSquares.\n\nExamples\n\njulia> fit(SphericalVariogram, γ)\n\n\n\n\n\nfit(Variogram, γ, [algo])\n\nFit all subtypes of Variogram to empirical variogram γ and return the one with minimum error as defined by the algorithm algo.\n\nExamples\n\njulia> fit(Variogram, γ)\n\n\n\n\n\n","category":"method"},{"location":"variography/fitting/#","page":"Fitting variograms","title":"Fitting variograms","text":"Currently the following fitting methods are implemented:","category":"page"},{"location":"variography/fitting/#Weighted-least-squares-1","page":"Fitting variograms","title":"Weighted least squares","text":"","category":"section"},{"location":"variography/fitting/#","page":"Fitting variograms","title":"Fitting variograms","text":"WeightedLeastSquares","category":"page"},{"location":"variography/fitting/#Variography.WeightedLeastSquares","page":"Fitting variograms","title":"Variography.WeightedLeastSquares","text":"WeightedLeastSquares()\nWeightedLeastSquares(w)\n\nFit theoretical variogram using weighted least squares with weighting function w (e.g. h -> 1/h). If no weighting function is provided, bin counts of empirical variogram are normalized and used as weights.\n\n\n\n\n\n","category":"type"},{"location":"problems/#Problems-1","page":"Problems","title":"Problems","text":"","category":"section"},{"location":"problems/#","page":"Problems","title":"Problems","text":"The project provides solutions to three three types of problems defined below.","category":"page"},{"location":"problems/#Estimation-1","page":"Problems","title":"Estimation","text":"","category":"section"},{"location":"problems/#","page":"Problems","title":"Problems","text":"An estimation problem in geostatitsics is a triplet:","category":"page"},{"location":"problems/#","page":"Problems","title":"Problems","text":"Spatial data (i.e. data with coordinates)\nSpatial domain (e.g. regular grid, point collection)\nTarget variables (or variables to be estimated)","category":"page"},{"location":"problems/#","page":"Problems","title":"Problems","text":"Each of these components is constructed separately, and then grouped (no memory is copied) in an EstimationProblem.","category":"page"},{"location":"problems/#","page":"Problems","title":"Problems","text":"EstimationProblem","category":"page"},{"location":"problems/#GeoStatsBase.EstimationProblem","page":"Problems","title":"GeoStatsBase.EstimationProblem","text":"EstimationProblem(sdata, sdomain, targetvars)\n\nA spatial estimation problem on a given spatial domain sdomain in which the variables to be estimated are listed in targetvars. The data of the problem is stored in spatial data sdata.\n\nExamples\n\nCreate an estimation problem for rainfall precipitation measurements:\n\njulia> EstimationProblem(sdata, sdomain, :precipitation)\n\nCreate an estimation problem for precipitation and CO₂:\n\njulia> EstimationProblem(sdata, sdomain, (:precipitation,:CO₂))\n\n\n\n\n\n","category":"type"},{"location":"problems/#Simulation-1","page":"Problems","title":"Simulation","text":"","category":"section"},{"location":"problems/#","page":"Problems","title":"Problems","text":"Likewise, a stochastic simulation problem in geostatistics is represented with the same triplet. However, the spatial data in this case is optional in order to accomodate the concept of conditional versus unconditional simulation.","category":"page"},{"location":"problems/#","page":"Problems","title":"Problems","text":"SimulationProblem","category":"page"},{"location":"problems/#GeoStatsBase.SimulationProblem","page":"Problems","title":"GeoStatsBase.SimulationProblem","text":"SimulationProblem(sdata, sdomain, targetvars, nreals)\nSimulationProblem(sdomain, targetvars, nreals)\n\nA spatial simulation problem on a given spatial domain sdomain in which the variables to be simulated are listed in targetvars.\n\nFor conditional simulation, the data of the problem is stored in spatial data sdata.\n\nFor unconditional simulation, a list of pairs targetvars must be provided mapping variable names to their types.\n\nIn both cases, a number nreals of realizations is requested.\n\nExamples\n\nCreate a conditional simulation problem for porosity and permeability with 100 realizations:\n\njulia> SimulationProblem(sdata, sdomain, (:porosity,:permeability), 100)\n\nCreate an unconditional simulation problem for porosity and facies type with 100 realizations:\n\njulia> SimulationProblem(sdomain, (:porosity => Float64, :facies => Int), 100)\n\n\n\n\n\n","category":"type"},{"location":"problems/#Learning-1","page":"Problems","title":"Learning","text":"","category":"section"},{"location":"problems/#","page":"Problems","title":"Problems","text":"A geostatistical learning problem consists of a triplet:","category":"page"},{"location":"problems/#","page":"Problems","title":"Problems","text":"Source spatial data (e.g. with labels)\nTarget spatial data (e.g. without labels)\nLearning task (e.g. classification)","category":"page"},{"location":"problems/#","page":"Problems","title":"Problems","text":"In this case, a learning model is trained with the source spatial data, and then used to perform the same task with the target spatial data.","category":"page"},{"location":"problems/#","page":"Problems","title":"Problems","text":"LearningProblem","category":"page"},{"location":"problems/#GeoStatsBase.LearningProblem","page":"Problems","title":"GeoStatsBase.LearningProblem","text":"LearningProblem(sdata, tdata, task)\n\nA spatial learning problem with source data sdata, target data tdata, and learning task.\n\nExamples\n\nCreate a clustering problem based on a set of soil features:\n\njulia> LearningProblem(sdata, tdata,\n                       ClusteringTask((:moisture,:mineral)))\n\n\n\n\n\n","category":"type"},{"location":"workflow/#Basic-workflow-1","page":"Basic workflow","title":"Basic workflow","text":"","category":"section"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"A basic geostatistical workflow often consists of three steps:","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"Manipulation of spatial data\nDefinition of geostatistical problem\nVisualization of problem solution","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"In this section, we walk through these steps to illustrate some of the features of the project.","category":"page"},{"location":"workflow/#Manipulating-data-1","page":"Basic workflow","title":"Manipulating data","text":"","category":"section"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"The workflow starts with the creation of spatial data objects, which can be loaded from disk or derived from other Julia variables. For example, given a Julia array (or image), which is not attached to any particular coordinate system:","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"using Plots\ngr(format=:svg) # hide\n\nZ = [10sin(i/10) + j for i in 1:100, j in 1:200]\n\nheatmap(Z)","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"we can georeference the image as RegularGridData:","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"using GeoStats\n\nΩ = RegularGridData(OrderedDict(:Z=>Z))","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"The origin and spacing of samples in the regular grid can be specified in the constructor:","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"RegularGridData(OrderedDict(:Z=>Z), (1.,1.), (10.,10.))","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"and different spatial data types have different constructor options (see Data for more options).","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"We plot the spatial data and note a few differences compared to the image plot shown above:","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"plot(Ω)","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"First, we note that the image was rotated to match the first index i of the array with the horizontal \"x\" axis, and the second index j of the array with the vertical \"y\" axis. Second, we note that the image was stretched to reflect the real 100x200 size of the regular grid data.","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"Each sample in the spatial data object has a coordinate, which is calculated on demand for a given list of locations (i.e. spatial indices):","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"coordinates(Ω, 1:3)","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"In-place versions exist to avoid unnecessary memory allocations.","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"All coordinates are retrieved as a ndims x npoints matrix when we do not specify the spatial indices:","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"coordinates(Ω)","category":"page"},{"location":"workflow/#Tabular-access-1","page":"Basic workflow","title":"Tabular access","text":"","category":"section"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"Spatial data types implement the Tables.jl interface, which means that they can be accessed as if they were tables with samples in the rows and variables in the columns:","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"Ω[1:3,:Z]","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"In this case, the coordinates of the samples are lost. To reconstruct a spatial data object, we need to save the spatial indices that were used to index the table:","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"zvals = Ω[1:3,:Z]\ncoord = coordinates(Ω, 1:3)\n\nPointSetData(OrderedDict(:Z=>zvals), coord)","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"To recover the original Julia array behind a spatial data object, we can index the data with the variable name. In this case, the size of the array (i.e. 100x200) is preserved:","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"Ω[:Z]","category":"page"},{"location":"workflow/#Spatial-views-1","page":"Basic workflow","title":"Spatial views","text":"","category":"section"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"Spatial data types can be viewed at a subset of locations without unnecessary memory allocations. Spatial views do not preserve the spatial regularity of the data in general.","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"By plotting a view of the first 10 lines of our regular grid data, we obtain a general PointSetData as opposed to a RegularGridData:","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"Ωᵥ = view(Ω, 1:10*100)\nplot(Ωᵥ)","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"We plot a random view of the grid to emphasize that views do not preserve spatial regularity:","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"inds = rand(1:npoints(Ω), 100)\nplot(view(Ω, inds))","category":"page"},{"location":"workflow/#Data-partitions-1","page":"Basic workflow","title":"Data partitions","text":"","category":"section"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"Spatial data objects can be partitioned with various efficient methods. To demonstrate the operation, we partition our spatial data view into balls of given radius:","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"Π = partition(Ωᵥ, BallPartitioner(5.))\nplot(Π)","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"or, alternatively, into two halfspaces:","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"Π = partition(Ωᵥ, BisectFractionPartitioner((1.,1.), 0.5))\nplot(Π)","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"Spatial partitions are (lazy) iterators of spatial views, which are useful in many contexts as it will be shown in the next section. To access a subset of a partition, we use index notation:","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"plot(Π[1])","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"plot(Π[2])","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"Various other spatial operations are defined in the framework besides partitioning. For a complete list, please check the Operations section of the reference guide.","category":"page"},{"location":"workflow/#Defining-problems-1","page":"Basic workflow","title":"Defining problems","text":"","category":"section"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"Having defined the spatial data objects, we proceed and define the geostatistical problem to be solved. In this guide, we illustrate geostatistical learning. For other types of geostatistical problems, please check the Problems section of the documentation.","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"Let's assume that we have spatial data with some variable that we want to predict in a supervised learning setting. We load the data from a CSV file, and inspect the available columns:","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"using CSV\ngr(size=(800,400)) # hide\n\ndf = CSV.read(\"data/agriculture.csv\")\n\nfirst(df, 5)","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"Columns band1, ..., band4 represent four satellite bands for different locations (x,y) in this spatial region. The column crop has the crop type for each location that was labeled manually with the purpose of training a learning model.","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"Because the labels are categorical variables, we need to inform the framework the correct type:","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"using CategoricalArrays\n\ndf.crop = categorical(df.crop)\n\nfirst(df, 5)","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"We can now georeference the data as a GeoDataFrame and plot some of the spatial variables:","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"Ω = GeoDataFrame(df, [:x,:y])\n\ngr(format=:png) # hide\nplot(Ω, variables=[:band4,:crop], ms=0.2, mc=:viridis)","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"Similar to a generic statistical learning workflow, we split the data into \"train\" and \"test\" sets. The main difference here is that our spatial split function accepts a separating plane specified by its normal direction (1,-1):","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"Ωs, Ωt = split(Ω, 0.2, (1.,-1.))\n\nplot(domain(Ωs), ms=0.2)\nplot!(domain(Ωt), ms=0.2, mc=:green)","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"We can visualize the domain of the \"train\" (or source) set Ωs in black, and the domain of the \"test\" (or target) set Ωt in green. We reserved 20% of the samples to Ωs and 80% to Ωt. Internally, this spatial split function is implemented in terms of efficient spatial partitioning operations, which were illustrated in the previous section.","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"Let's define the learning task and the geostatistical learning problem. We want to predict the crop type based on the four satellite bands. We will train the model in Ωs where labels are available, and apply it to Ωt, which is our target:","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"feats = [:band1,:band2,:band3,:band4]\nlabel = :crop\n\ntask = ClassificationTask(feats, label)\n\nproblem = LearningProblem(Ωs, Ωt, task)","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"GeoStats.jl is integrated with the MLJ.jl project, which means that we can solve geostatistical learning problems with any classical learning model:","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"using MLJ\n\n@load DecisionTreeClassifier\n\nmodel = DecisionTreeClassifier()\n\nsolver = PointwiseLearn(model)","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"In this example, we selected a PointwiseLearn strategy to solve the geostatistical learning problem. This strategy consists of applying the learning model pointwise for every point in the spatial data:","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"Ω̂t = solve(problem, solver)","category":"page"},{"location":"workflow/#Plotting-solutions-1","page":"Basic workflow","title":"Plotting solutions","text":"","category":"section"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"We note that the solution to a geostatistical learning problem is a spatial data object, and we can inspect it with the same methods already described above. This also means that we can plot the solution directly, side by side with the true label in this synthetic example:","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"p̂ = plot(Ω̂t, ms=0.2, mc=:viridis, title=\"crop (prediction)\")\np = plot(Ωt, variables=[:crop], ms=0.2, mc=:viridis)\n\nplot(p̂, p)","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"Visually, the learning model has succeeded predicting the crop. We can also estimate the generalization error of the geostatistical solver with spatial validation methods such as block cross-validation and leave-ball-out, but these methods deserve a separate tutorial.","category":"page"},{"location":"workflow/#","page":"Basic workflow","title":"Basic workflow","text":"With this example we conclude the basic workflow. To get familiar with other features of the project, please check the tutorials and the reference guide.","category":"page"},{"location":"validation/#Validation-1","page":"Validation","title":"Validation","text":"","category":"section"},{"location":"validation/#","page":"Validation","title":"Validation","text":"GeoStats.jl was designed to, among other things, facilitate rigorous scientific comparison of different geostatistical solvers in the literature. As a user of geostatistics, you may be interested in applying various solvers on a given data set and pick the ones with best performance. As a researcher in the field, you may be interested in benchmarking your new method against other established methods.","category":"page"},{"location":"validation/#","page":"Validation","title":"Validation","text":"Errors of geostatistical solvers can be estimated on given geostatistical problems:","category":"page"},{"location":"validation/#","page":"Validation","title":"Validation","text":"error(::AbstractSolver, ::AbstractProblem, ::AbstractErrorEstimator)","category":"page"},{"location":"validation/#Base.error-Tuple{AbstractSolver,AbstractProblem,AbstractErrorEstimator}","page":"Validation","title":"Base.error","text":"error(solver, problem, eestimator)\n\nEstimate error of solver in a given problem with eestimator error estimation method.\n\n\n\n\n\n","category":"method"},{"location":"validation/#","page":"Validation","title":"Validation","text":"Below is the list of currently implemented error estimation methods.","category":"page"},{"location":"validation/#Cross-validation-1","page":"Validation","title":"Cross-validation","text":"","category":"section"},{"location":"validation/#","page":"Validation","title":"Validation","text":"CrossValidation","category":"page"},{"location":"validation/#GeoStatsBase.CrossValidation","page":"Validation","title":"GeoStatsBase.CrossValidation","text":"CrossValidation(k; shuffle=true, loss=Dict())\n\nk-fold cross-validation. Optionally, shuffle the data, and specify loss function  from LossFunctions.jl for some of the variables.\n\nCrossValidation(partitioner; loss=Dict())\n\nGeneralization of k-fold cross-validation in which the data is split using partitioner.\n\nReferences\n\nGeisser, S. 1975. The predictive sample reuse method with applications\nBurman, P. 1989. A comparative study of ordinary cross-validation, v-fold cross-validation and the repeated learning-testing methods\n\n\n\n\n\n","category":"type"},{"location":"validation/#Block-cross-validation-1","page":"Validation","title":"Block cross-validation","text":"","category":"section"},{"location":"validation/#","page":"Validation","title":"Validation","text":"BlockCrossValidation","category":"page"},{"location":"validation/#GeoStatsBase.BlockCrossValidation","page":"Validation","title":"GeoStatsBase.BlockCrossValidation","text":"BlockCrossValidation(sides; loss=Dict())\n\nCross-validation with blocks of given sides. Optionally, specify loss function from LossFunctions.jl for some of the variables. If only one side is provided, then blocks become cubes.\n\nReferences\n\nRoberts et al. 2017. Cross-validation strategies for data with temporal, spatial, hierarchical, or phylogenetic structure\nPohjankukka et al. 2017. Estimating the prediction performance of spatial models via spatial k-fold cross-validation\n\n\n\n\n\n","category":"type"},{"location":"validation/#Leave-ball-out-validation-1","page":"Validation","title":"Leave-ball-out validation","text":"","category":"section"},{"location":"validation/#","page":"Validation","title":"Validation","text":"LeaveBallOut","category":"page"},{"location":"validation/#GeoStatsBase.LeaveBallOut","page":"Validation","title":"GeoStatsBase.LeaveBallOut","text":"LeaveBallOut(ball; loss=Dict())\n\nLeave-ball-out (a.k.a. spatial leave-one-out) validation. Optionally, specify loss function from LossFunctions.jl for some of the variables.\n\nLeaveBallOut(radius; ndims=3, loss=Dict())\n\nBy default, use Euclidean ball of given radius in space with ndims dimensions.\n\nReferences\n\nLe Rest et al. 2014. Spatial leave-one-out cross-validation for variable selection in the presence of spatial autocorrelation\n\n\n\n\n\n","category":"type"},{"location":"validation/#Weighted-cross-validation-1","page":"Validation","title":"Weighted cross-validation","text":"","category":"section"},{"location":"validation/#","page":"Validation","title":"Validation","text":"WeightedCrossValidation","category":"page"},{"location":"validation/#GeoStatsBase.WeightedCrossValidation","page":"Validation","title":"GeoStatsBase.WeightedCrossValidation","text":"WeightedCrossValidation(weighter, partitioner;\n                        lambda=1.0, loss=Dict())\n\nWeighted cross-validation in which samples are split into folds with partitioner method and are weighted with weighter method. Weights are raised to lambda power in [0,1]. Optionally, specify loss function from LossFunctions.jl for some of the variables.\n\nWeightedCrossValidation(weighter, k; shuffle=true,\n                        lambda=1.0, loss=Dict())\n\nAlternatively, specify the desired number of folds k and shuffle options for a UniformPartitioner.\n\nReferences\n\nSugiyama et al. 2006. Importance-weighted cross-validation for covariate shift\nSugiyama et al. 2007. Covariate shift adaptation by importance weighted cross validation\n\n\n\n\n\n","category":"type"},{"location":"validation/#Weighted-hold-out-validation-1","page":"Validation","title":"Weighted hold-out validation","text":"","category":"section"},{"location":"validation/#","page":"Validation","title":"Validation","text":"WeightedHoldOut","category":"page"},{"location":"validation/#GeoStatsBase.WeightedHoldOut","page":"Validation","title":"GeoStatsBase.WeightedHoldOut","text":"WeightedHoldOut(weighter, fraction; loss=Dict())\n\nWeighted loss validation with train / hold-out split. The source data of the problem is split with a fraction into train and hold-out sets, and the samples are weighted with a weighter method. Optionally, specify loss function from LossFunctions.jl for some of the variables.\n\n\n\n\n\n","category":"type"},{"location":"validation/#Weighted-bootstrap-validation-1","page":"Validation","title":"Weighted bootstrap validation","text":"","category":"section"},{"location":"validation/#","page":"Validation","title":"Validation","text":"WeightedBootstrap","category":"page"},{"location":"validation/#GeoStatsBase.WeightedBootstrap","page":"Validation","title":"GeoStatsBase.WeightedBootstrap","text":"WeightedBootstrap(weighter, nsamples; loss=Dict())\n\nWeighted bootstrap with nsamples samples drawn with replacement using the weights produced by weighter. Optionally, specify loss function from LossFunctions.jl for some of the variables.\n\n\n\n\n\n","category":"type"},{"location":"validation/#Density-ratio-validation-1","page":"Validation","title":"Density-ratio validation","text":"","category":"section"},{"location":"validation/#","page":"Validation","title":"Validation","text":"DensityRatioValidation","category":"page"},{"location":"validation/#GeoStatsBase.DensityRatioValidation","page":"Validation","title":"GeoStatsBase.DensityRatioValidation","text":"DensityRatioValidation(k; [parameters])\n\nDesntity ratio validation where weights are first obtained with density ratio estimation, and then used in k-fold weighted cross-validation.\n\nParameters\n\nestimator - Density ratio estimator (default to LSIF())\noptlib    - Optimization library (default to default_optlib(estimator))\nlambda    - Power of density ratios (default to 1.0)\n\nPlease see DensityRatioEstimation.jl for a list of supported estimators.\n\nReferences\n\nTODO\n\n\n\n\n\n","category":"type"},{"location":"validation/#Ball-sample-validation-1","page":"Validation","title":"Ball-sample validation","text":"","category":"section"},{"location":"validation/#","page":"Validation","title":"Validation","text":"BallSampleValidation","category":"page"},{"location":"validation/#GeoStatsBase.BallSampleValidation","page":"Validation","title":"GeoStatsBase.BallSampleValidation","text":"BallSampleValidation(eestimator, sourceradius, targetradius;\n                     metric=Euclidean(), tol=1e-4, maxiter=10)\n\nBall sample validation with error estimator eestimator, based on samples collected from source and target data. sourceradius is the radius of the ball for the source data and targetradius is the radius of the ball for the target data.\n\n\n\n\n\n","category":"type"},{"location":"plotting/#Plotting-1","page":"Plotting","title":"Plotting","text":"","category":"section"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"Most objects defined in the project can be plotted directly without major efforts. Other plots are provided below that can be useful for spatial data analysis.","category":"page"},{"location":"plotting/#hscatter-1","page":"Plotting","title":"hscatter","text":"","category":"section"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"A hscatter plot between two variables var1 and var2 (possibly with var2 = var1) is a simple scatter plot in which the dots represent all ordered pairs of values of var1 and var2 at a given lag h.","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"using GeoStats\nusing Plots\ngr(size=(800,300)) # hide\n\nZ = [10sin(i/10) + j for i in 1:100, j in 1:200]\n\nΩ = RegularGridData(OrderedDict(:Z=>Z))\n\nhscatter(sample(Ω, 500), :Z, lags=[0.,20.,50.])","category":"page"},{"location":"kriging/estimators/#Estimators-1","page":"Estimators","title":"Estimators","text":"","category":"section"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"A Kriging estimator has the form:","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"hatZ(x_0) = lambda_1 Z(x_1) + lambda_2 Z(x_2) + cdots + lambda_n Z(x_n)quad x_i in R^m lambda_i in R","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"with Zcolon R^m times Omega to R a random field.","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"This package implements the following Kriging variants:","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"Simple Kriging\nOrdinary Kriging\nUniversal Kriging\nExternal Drift Kriging","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"All these variants follow the same interface: an estimator object is first created with a given set of parameters (e.g. estimator = OrdinaryKriging(γ)), it is then combined with the data krig = fit(estimator, X, z) to obtain predictions at new locations predict(krig, xₒ).","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"The fit function takes care of building the Kriging system and factorizing the LHS with an appropriate decomposition (e.g. Cholesky, LU):","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"KrigingEstimators.fit","category":"page"},{"location":"kriging/estimators/#StatsBase.fit","page":"Estimators","title":"StatsBase.fit","text":"fit(estimator, X, z)\n\nFit estimator to coordinates X and values z, and return a fitted estimator.\n\n\n\n\n\n","category":"function"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"The predict function performs the estimation at a given location:","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"predict","category":"page"},{"location":"kriging/estimators/#GeoStatsBase.predict","page":"Estimators","title":"GeoStatsBase.predict","text":"predict(estimator, xₒ)\n\nPredict with the estimator at coordinates xₒ.\n\n\n\n\n\n","category":"function"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"Alternative constructors are provided for convenience that will immediately fit the Kriging parameters to the data. In this case, the data is passed as the first argument. For example:","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"OrdinaryKriging(X, z, γ)","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"creates a OrdinaryKriging(γ) estimator and fits it to (X,z).","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"A typical use of the interface is as follows:","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"# build and factorize the system\nsk = SimpleKriging(X, z, γ, mean(z))\n\n# estimate at various locations\nfor xₒ in [x₁, x₂, x₃]\n  μ, σ² = predict(sk, xₒ)\nend","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"For advanced users, the Kriging weights and Lagrange multipliers at a given location can be accessed with the weights method. This method returns a KrigingWeights object containing a field λ for the weights and a field ν for the Lagrange multipliers:","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"weights","category":"page"},{"location":"kriging/estimators/#KrigingEstimators.weights","page":"Estimators","title":"KrigingEstimators.weights","text":"weights(estimator, xₒ)\n\nCompute the weights λ (and Lagrange multipliers ν) for the estimator at coordinates xₒ.\n\n\n\n\n\n","category":"function"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"For example with Ordinary Kriging:","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"ok = OrdinaryKriging(X, z, γ)\nw = weights(ok, xₒ)\nw.λ, w.ν","category":"page"},{"location":"kriging/estimators/#Simple-Kriging-1","page":"Estimators","title":"Simple Kriging","text":"","category":"section"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"In Simple Kriging, the mean mu of the random field is assumed to be constant and known. The resulting linear system is:","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"beginbmatrix\ncov(x_1x_1)  cov(x_1x_2)  cdots  cov(x_1x_n) \ncov(x_2x_1)  cov(x_2x_2)  cdots  cov(x_2x_n) \nvdots  vdots  ddots  vdots \ncov(x_nx_1)  cov(x_nx_2)  cdots  cov(x_nx_n)\nendbmatrix\nbeginbmatrix\nlambda_1 \nlambda_2 \nvdots \nlambda_n\nendbmatrix\n=\nbeginbmatrix\ncov(x_1x_0) \ncov(x_2x_0) \nvdots \ncov(x_nx_0)\nendbmatrix","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"or in matricial form Cl = c. We subtract the given mean from the observations boldsymboly = z - mu 1 and compute the mean and variance at location x_0:","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"mu(x_0) = mu + boldsymboly^top l","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"sigma^2(x_0) = cov(0) - c^top l","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"SimpleKriging","category":"page"},{"location":"kriging/estimators/#KrigingEstimators.SimpleKriging","page":"Estimators","title":"KrigingEstimators.SimpleKriging","text":"SimpleKriging(γ, μ)\nSimpleKriging(X, z, γ, μ)\n\nSimple Kriging with variogram model γ and constant mean μ.\n\nOptionally, pass the coordinates X and values z to the fit function.\n\nNotes\n\nSimple Kriging requires stationary variograms\n\n\n\n\n\n","category":"type"},{"location":"kriging/estimators/#Ordinary-Kriging-1","page":"Estimators","title":"Ordinary Kriging","text":"","category":"section"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"In Ordinary Kriging the mean of the random field is assumed to be constant and unknown. The resulting linear system is:","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"beginbmatrix\nG  1 \n1^top  0\nendbmatrix\nbeginbmatrix\nl \nnu\nendbmatrix\n=\nbeginbmatrix\ng \n1\nendbmatrix","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"with nu the Lagrange multiplier associated with the constraint 1^top l = 1. The mean and variance at location x_0 are given by:","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"mu(x_0) = z^top lambda","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"sigma^2(x_0) =  beginbmatrix g  1 endbmatrix^top beginbmatrix l  nu endbmatrix","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"OrdinaryKriging","category":"page"},{"location":"kriging/estimators/#KrigingEstimators.OrdinaryKriging","page":"Estimators","title":"KrigingEstimators.OrdinaryKriging","text":"OrdinaryKriging(γ)\nOrdinaryKriging(X, z, γ)\n\nOrdinary Kriging with variogram model γ.\n\nOptionally, pass the coordinates X and values z to the fit function.\n\n\n\n\n\n","category":"type"},{"location":"kriging/estimators/#Universal-Kriging-1","page":"Estimators","title":"Universal Kriging","text":"","category":"section"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"In Universal Kriging, the mean of the random field is assumed to be a polynomial of the spatial coordinates:","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"mu(x) = sum_k=1^N_d beta_k f_k(x)","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"with N_d monomials f_k of degree up to d. For example, in 2D there are 6 monomials of degree up to 2:","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"mu(x_1x_2) =  beta_1 1 + beta_2 x_1 + beta_3 x_2 + beta_4 x_1 x_2 + beta_5 x_1^2 + beta_6 x_2^2","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"The choice of the degree d determines the size of the polynomial matrix","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"F =\nbeginbmatrix\nf_1(x_1)  f_2(x_1)  cdots  f_N_d(x_1) \nf_1(x_2)  f_2(x_2)  cdots  f_N_d(x_2) \nvdots  vdots  ddots  vdots \nf_1(x_n)  f_2(x_n)  cdots  f_N_d(x_n)\nendbmatrix","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"and polynomial vector f = beginbmatrix f_1(x_0)  f_2(x_0)  cdots  f_N_d(x_0) endbmatrix^top.","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"The variogram determines the variogram matrix:","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"G =\nbeginbmatrix\ngamma(x_1x_1)  gamma(x_1x_2)  cdots  gamma(x_1x_n) \ngamma(x_2x_1)  gamma(x_2x_2)  cdots  gamma(x_2x_n) \nvdots  vdots  ddots  vdots \ngamma(x_nx_1)  gamma(x_nx_2)  cdots  gamma(x_nx_n)\nendbmatrix","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"and the variogram vector g = beginbmatrix gamma(x_1x_0)  gamma(x_2x_0)  cdots  gamma(x_nx_0) endbmatrix^top.","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"The resulting linear system is:","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"beginbmatrix\nG  F \nF^top  boldsymbol0\nendbmatrix\nbeginbmatrix\nl \nboldsymbolnu\nendbmatrix\n=\nbeginbmatrix\ng \nf\nendbmatrix","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"with boldsymbolnu the Lagrange multipliers associated with the universal constraints. The mean and variance at location x_0 are given by:","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"mu(x_0) = z^top l","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"sigma^2(x_0) = beginbmatrixg  fendbmatrix^top beginbmatrixl  boldsymbolnuendbmatrix","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"UniversalKriging","category":"page"},{"location":"kriging/estimators/#KrigingEstimators.UniversalKriging","page":"Estimators","title":"KrigingEstimators.UniversalKriging","text":"UniversalKriging(γ, degree, dim)\nUniversalKriging(X, z, γ, degree)\n\nUniversal Kriging with variogram model γ and polynomial degree on a spatial domain of dimension dim.\n\nOptionally, pass the coordinates X and values z to the fit function.\n\nNotes\n\nOrdinaryKriging is recovered for 0th degree polynomial\nFor non-polynomial mean, see ExternalDriftKriging\n\n\n\n\n\n","category":"type"},{"location":"kriging/estimators/#External-Drift-Kriging-1","page":"Estimators","title":"External Drift Kriging","text":"","category":"section"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"In External Drift Kriging, the mean of the random field is assumed to be a combination of known smooth functions:","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"mu(x) = sum_k beta_k m_k(x)","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"Differently than Universal Kriging, the functions m_k are not necessarily polynomials of the spatial coordinates. In practice, they represent a list of variables that is strongly correlated (and co-located) with the variable being estimated.","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"External drifts are known to cause numerical instability. Give preference to other Kriging variants if possible.","category":"page"},{"location":"kriging/estimators/#","page":"Estimators","title":"Estimators","text":"ExternalDriftKriging","category":"page"},{"location":"kriging/estimators/#KrigingEstimators.ExternalDriftKriging","page":"Estimators","title":"KrigingEstimators.ExternalDriftKriging","text":"ExternalDriftKriging(γ, drifts)\nExternalDriftKriging(X, z, γ, drifts)\n\nExternal Drift Kriging with variogram model γ and external drifts functions.\n\nOptionally, pass the coordinates X and values z to the fit function.\n\nNotes\n\nExternal drift functions should be smooth\nKriging system with external drift is often unstable\nInclude a constant drift (e.g. x->1) for unbiased estimation\nOrdinaryKriging is recovered for drifts = [x->1]\nFor polynomial mean, see UniversalKriging\n\n\n\n\n\n","category":"type"},{"location":"#GeoStats.jl-1","page":"Home","title":"GeoStats.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"An extensible framework for high-performance geostatistics in Julia.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: Build Status) (Image: Coverage Status) (Image: Stable Documentation) (Image: Latest Documentation) (Image: License File)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: Gitter) (Image: JOSS) (Image: DOI)","category":"page"},{"location":"#Overview-1","page":"Home","title":"Overview","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"In many fields of science, such as mining engineering, hydrogeology, petroleum engineering, and environmental sciences, traditional statistical theories fail to provide unbiased estimates of resources due to the presence of spatial correlation. Geostatistics (a.k.a. spatial statistics) is the branch of statistics developed to overcome this limitation. Particularly, it is the branch that takes spatial coordinates of data into account.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"GeoStats.jl is an attempt to bring together bleeding-edge research in the geostatistics community into a comprehensive framework for spatial statistics, as well as to empower researchers and practioners with a toolkit for fast assessment of different modeling approaches.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The design of this project is the result of many years developing geostatistical software. I hope that it can serve to promote more collaboration between geostatisticians around the globe and to standardize this incredible science. If you would like to help support the project, please star the repository on GitHub and share it with your colleagues. If you would like to extend the framework with new geostatistical solvers, please check the Developer guide.","category":"page"},{"location":"#Citing-1","page":"Home","title":"Citing","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"@ARTICLE{Hoffimann2018,\n  title={GeoStats.jl – High-performance geostatistics in Julia},\n  author={Hoffimann, Júlio},\n  journal={Journal of Open Source Software},\n  publisher={The Open Journal},\n  volume={3},\n  pages={692},\n  number={24},\n  ISSN={2475-9066},\n  DOI={10.21105/joss.00692},\n  url={https://dx.doi.org/10.21105/joss.00692},\n  year={2018},\n  month={Apr}\n}","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Get the latest stable release with Julia's package manager:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"] add GeoStats","category":"page"},{"location":"#Tutorials-1","page":"Home","title":"Tutorials","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"A set of Jupyter notebooks demonstrating the current functionality of the project is available in GeoStatsTutorials with an accompanying series of videos:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"<p align=\"center\">\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/yDIK9onnZVw\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</p>","category":"page"},{"location":"#Quick-example-1","page":"Home","title":"Quick example","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Below is a quick preview of the high-level API:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"using GeoStats\nusing Plots\ngr(size=(900,400)) # hide\n\n# list of properties with coordinates\nprops = OrderedDict(:prop => [1.,0.,1.])\ncoord = [(25.,25.),(50.,75.),(75.,50.)]\n\n# define spatial data\nsdata = PointSetData(props, coord)\n\n# define spatial domain\nsdomain = RegularGrid(100, 100)\n\n# define estimation problem for any data column(s)\nproblem = EstimationProblem(sdata, sdomain, :prop)\n\n# choose a solver from the list of solvers\nsolver = Kriging(\n  :prop => (variogram=GaussianVariogram(range=35.),)\n)\n\n# solve the problem\nsolution = solve(problem, solver)\n\n# plot the solution\ncontourf(solution, clabels=true)\npng(\"images/EstimationSolution.png\") # hide","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#Project-organization-1","page":"Home","title":"Project organization","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The project is split into various packages:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Package Description\nGeoStats.jl Main package reexporting full stack of packages for geostatistics.\nVariography.jl Variogram estimation and modeling, and related tools.\nKrigingEstimators.jl High-performance implementations of Kriging estimators.\nPointPatterns.jl Spatial point pattern analysis and synthesis.\nGeoStatsImages.jl Training images for multiple-point geostatistical simulation.\nGslibIO.jl Utilities to read/write extended GSLIB files.\nGeoStatsBase.jl Base package containing interfaces and developer tools.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The main GeoStats.jl package reexports the full stack of packages for high-performance geostatistics in Julia. Other packages like GeoStatsImages.jl can be installed for additional functionality. Besides the packages above, the project is extended via solver packages. These solvers are implemented independently of the main package for different geostatistical problems.","category":"page"},{"location":"statistics/#Statistics-1","page":"Statistics","title":"Statistics","text":"","category":"section"},{"location":"statistics/#","page":"Statistics","title":"Statistics","text":"The term spatial statistics can refer to statistics computed with samples collected in a spatial domain (a.k.a. spatial data), or to statistics computed with multiple realizations of a random field (a.k.a. ensemble).","category":"page"},{"location":"statistics/#Data-1","page":"Statistics","title":"Data","text":"","category":"section"},{"location":"statistics/#","page":"Statistics","title":"Statistics","text":"The following statistics have spatial semantics (i.e. make use of spatial coordinates), and as such, approximate better spatial variables when compared to their non-spatial counterparts:","category":"page"},{"location":"statistics/#","page":"Statistics","title":"Statistics","text":"EmpiricalHistogram\nmean(::AbstractData)\nvar(::AbstractData)","category":"page"},{"location":"statistics/#GeoStatsBase.EmpiricalHistogram","page":"Statistics","title":"GeoStatsBase.EmpiricalHistogram","text":"EmpiricalHistogram(sdata)\n\nSpatial histogram of spatial data sdata.\n\n\n\n\n\n","category":"function"},{"location":"statistics/#Statistics.mean-Tuple{AbstractData}","page":"Statistics","title":"Statistics.mean","text":"mean(sdata)\nmean(sdata, v)\nmean(sdata, v, s)\n\nSpatial mean of spatial data sdata. Optionally, specify the variable v and the block side s.\n\n\n\n\n\n","category":"method"},{"location":"statistics/#Statistics.var-Tuple{AbstractData}","page":"Statistics","title":"Statistics.var","text":"var(sdata)\nvar(sdata, v)\nvar(sdata, v, s)\n\nSpatial variance of spatial data sdata. Optionally, specify the variable v and the block side s.\n\n\n\n\n\n","category":"method"},{"location":"statistics/#Ensemble-1","page":"Statistics","title":"Ensemble","text":"","category":"section"},{"location":"statistics/#","page":"Statistics","title":"Statistics","text":"A set of geostatistical realizations of a random field represents a probability distribution. It is often useful to compute summary statistics with this set or ensemble:","category":"page"},{"location":"statistics/#","page":"Statistics","title":"Statistics","text":"mean(::SimulationSolution)\nvar(::SimulationSolution)\nquantile(::SimulationSolution, ::Number)","category":"page"},{"location":"statistics/#Statistics.mean-Tuple{SimulationSolution}","page":"Statistics","title":"Statistics.mean","text":"mean(solution)\n\nMean of simulation solution.\n\n\n\n\n\n","category":"method"},{"location":"statistics/#Statistics.var-Tuple{SimulationSolution}","page":"Statistics","title":"Statistics.var","text":"var(solution)\n\nVariance of simulation solution.\n\n\n\n\n\n","category":"method"},{"location":"statistics/#Statistics.quantile-Tuple{SimulationSolution,Number}","page":"Statistics","title":"Statistics.quantile","text":"quantile(solution, p)\n\np-quantile of simulation solution.\n\n\n\n\n\n","category":"method"},{"location":"about/citing/#","page":"Citing","title":"Citing","text":"If you find GeoStats.jl useful in your work, please consider citing it:","category":"page"},{"location":"about/citing/#","page":"Citing","title":"Citing","text":"(Image: JOSS) (Image: DOI)","category":"page"},{"location":"about/citing/#","page":"Citing","title":"Citing","text":"@ARTICLE{Hoffimann2018,\n  title={GeoStats.jl – High-performance geostatistics in Julia},\n  author={Hoffimann, Júlio},\n  journal={Journal of Open Source Software},\n  publisher={The Open Journal},\n  volume={3},\n  pages={692},\n  number={24},\n  ISSN={2475-9066},\n  DOI={10.21105/joss.00692},\n  url={https://dx.doi.org/10.21105/joss.00692},\n  year={2018},\n  month={Apr}\n}","category":"page"}]
}
